{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Castle Motors - Auto Dealership Platform\n\n## Overview\n\nCastle Motors is a comprehensive automotive dealership platform that provides both an inventory management system and professional auto broker services. The application allows customers to browse available vehicles, request broker services for finding specific cars at auction, and contact the dealership. It features a modern React frontend with a robust Express.js backend, integrated with PostgreSQL for data persistence and Google Cloud Storage for file management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for RESTful API development\n- **Language**: TypeScript throughout the stack for consistent type safety\n- **Database ORM**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **File Uploads**: Uppy integration with direct-to-cloud uploads for efficient file handling\n- **Development**: Hot module replacement and error overlay for improved developer experience\n\n### Data Layer\n- **Database**: PostgreSQL with Neon serverless driver for scalable database connections\n- **Schema**: Well-defined schemas for vehicles, broker requests, contact inquiries, and users\n- **Migrations**: Drizzle Kit for database schema management and migrations\n- **Validation**: Zod schemas for runtime type validation and form handling\n\n### File Storage Strategy\n- **Cloud Storage**: Google Cloud Storage for scalable file management\n- **Upload Strategy**: Direct-to-cloud uploads using presigned URLs to reduce server load\n- **ACL System**: Custom object access control system for managing file permissions\n- **Integration**: Uppy dashboard for user-friendly file upload experience\n\n### Form Handling & Validation\n- **Form Library**: React Hook Form for performant form state management\n- **Validation**: Zod resolvers for consistent validation between frontend and backend\n- **UI Components**: Integrated form components with error handling and accessibility\n\n### Code Organization\n- **Monorepo Structure**: Shared TypeScript types and schemas between client and server\n- **Path Aliases**: Configured for clean imports and better code organization\n- **Component Structure**: Modular UI components with clear separation of concerns\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL for serverless database hosting\n- **File Storage**: Google Cloud Storage for asset management\n- **Authentication**: Replit's sidecar service for Google Cloud credentials\n\n### UI & Design System\n- **Component Library**: Radix UI primitives for accessibility-first components\n- **Icons**: Lucide React for consistent iconography\n- **Fonts**: Google Fonts integration (Inter, Architects Daughter, DM Sans, Fira Code, Geist Mono)\n\n### Development Tools\n- **Replit Integration**: Cartographer plugin and runtime error modal for Replit environment\n- **Build Tools**: ESBuild for server bundling, PostCSS for CSS processing\n- **File Uploads**: Uppy ecosystem (core, dashboard, AWS S3 plugin, React integration)\n\n### Form & Data Management\n- **Form Validation**: Hookform resolvers with Zod integration\n- **HTTP Client**: Native fetch with custom wrapper for API requests\n- **State Management**: TanStack Query for server state and caching","size_bytes":3881},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertVehicleSchema, insertBrokerRequestSchema, insertContactInquirySchema, insertVehicleInquirySchema, insertAdminUserSchema, insertMarketingSourceSchema } from \"@shared/schema\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport session from \"express-session\";\nimport bcrypt from \"bcrypt\";\nimport Stripe from \"stripe\";\n\n// Simple admin authentication middleware\nfunction isAdminAuthenticated(req: any, res: any, next: any) {\n  if (req.session?.adminUser) {\n    return next();\n  }\n  return res.status(401).json({ error: \"Unauthorized - Admin access required\" });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize Stripe - will be null if keys aren't provided yet\n  let stripe: Stripe | null = null;\n  if (process.env.STRIPE_SECRET_KEY) {\n    stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: \"2025-08-27.basil\",\n    });\n  }\n  // Session middleware for admin authentication\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'castle-motors-admin-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Initialize default admin user\n  try {\n    await storage.initializeDefaultAdmin();\n    console.log(\"Default admin user initialized\");\n  } catch (error) {\n    console.error(\"Failed to initialize default admin user:\", error);\n  }\n\n  // Admin authentication routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ error: \"Username and password are required\" });\n      }\n\n      const adminUser = await storage.getAdminUserByUsername(username);\n      if (!adminUser) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const isPasswordValid = await bcrypt.compare(password, adminUser.password);\n      if (!isPasswordValid) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Store admin user in session\n      (req.session as any).adminUser = {\n        id: adminUser.id,\n        username: adminUser.username,\n        email: adminUser.email\n      };\n\n      res.json({ success: true, admin: { username: adminUser.username, email: adminUser.email } });\n    } catch (error) {\n      console.error(\"Admin login error:\", error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", (req, res) => {\n    req.session?.destroy((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ error: \"Logout failed\" });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  app.get(\"/api/admin/me\", isAdminAuthenticated, (req, res) => {\n    res.json((req.session as any).adminUser);\n  });\n  // Vehicle routes\n  app.get(\"/api/vehicles\", async (req, res) => {\n    try {\n      const vehicles = await storage.getAllVehicles();\n      res.json(vehicles);\n    } catch (error) {\n      console.error(\"Error fetching vehicles:\", error);\n      res.status(500).json({ error: \"Failed to fetch vehicles\" });\n    }\n  });\n\n  app.get(\"/api/vehicles/:id\", async (req, res) => {\n    try {\n      const vehicle = await storage.getVehicleById(req.params.id);\n      if (!vehicle) {\n        return res.status(404).json({ error: \"Vehicle not found\" });\n      }\n      res.json(vehicle);\n    } catch (error) {\n      console.error(\"Error fetching vehicle:\", error);\n      res.status(500).json({ error: \"Failed to fetch vehicle\" });\n    }\n  });\n\n  app.post(\"/api/vehicles\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertVehicleSchema.parse(req.body);\n      const vehicle = await storage.createVehicle(validatedData);\n      res.status(201).json(vehicle);\n    } catch (error) {\n      console.error(\"Error creating vehicle:\", error);\n      res.status(400).json({ error: \"Invalid vehicle data\" });\n    }\n  });\n\n  app.put(\"/api/vehicles/:id\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertVehicleSchema.partial().parse(req.body);\n      const vehicle = await storage.updateVehicle(req.params.id, validatedData);\n      if (!vehicle) {\n        return res.status(404).json({ error: \"Vehicle not found\" });\n      }\n      res.json(vehicle);\n    } catch (error) {\n      console.error(\"Error updating vehicle:\", error);\n      res.status(400).json({ error: \"Invalid vehicle data\" });\n    }\n  });\n\n  app.delete(\"/api/vehicles/:id\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const success = await storage.deleteVehicle(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Vehicle not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting vehicle:\", error);\n      res.status(500).json({ error: \"Failed to delete vehicle\" });\n    }\n  });\n\n  // Broker request routes\n  app.get(\"/api/broker-requests\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const requests = await storage.getAllBrokerRequests();\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching broker requests:\", error);\n      res.status(500).json({ error: \"Failed to fetch broker requests\" });\n    }\n  });\n\n  app.post(\"/api/broker-requests\", async (req, res) => {\n    try {\n      // Handle both old format (with single vehicle) and new format (with multiple vehicles)\n      let brokerData = req.body;\n      \n      // If this is the new format with vehicleSelections array, use it directly\n      if (brokerData.vehicleSelections && Array.isArray(brokerData.vehicleSelections)) {\n        // New format - validate and create\n        const validatedData = {\n          firstName: brokerData.firstName,\n          lastName: brokerData.lastName,\n          email: brokerData.email,\n          phone: brokerData.phone,\n          vehicleSelections: brokerData.vehicleSelections,\n          maxBudget: brokerData.maxBudget,\n          mileageRange: brokerData.mileageRange || null,\n          additionalRequirements: brokerData.additionalRequirements || null,\n          depositAgreed: brokerData.depositAgreed || \"true\"\n        };\n        \n        const request = await storage.createBrokerRequest(validatedData);\n        res.status(201).json(request);\n      } else {\n        // Old format - convert to new format for backward compatibility\n        const validatedData = insertBrokerRequestSchema.parse(brokerData);\n        const request = await storage.createBrokerRequest(validatedData);\n        res.status(201).json(request);\n      }\n    } catch (error) {\n      console.error(\"Error creating broker request:\", error);\n      res.status(400).json({ error: \"Invalid broker request data\" });\n    }\n  });\n\n  // Contact inquiry routes\n  app.get(\"/api/contact-inquiries\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const inquiries = await storage.getAllContactInquiries();\n      res.json(inquiries);\n    } catch (error) {\n      console.error(\"Error fetching contact inquiries:\", error);\n      res.status(500).json({ error: \"Failed to fetch contact inquiries\" });\n    }\n  });\n\n  app.post(\"/api/contact-inquiries\", async (req, res) => {\n    try {\n      const validatedData = insertContactInquirySchema.parse(req.body);\n      const inquiry = await storage.createContactInquiry(validatedData);\n      res.status(201).json(inquiry);\n    } catch (error) {\n      console.error(\"Error creating contact inquiry:\", error);\n      res.status(400).json({ error: \"Invalid contact inquiry data\" });\n    }\n  });\n\n  app.delete(\"/api/contact-inquiries/:id\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const success = await storage.deleteContactInquiry(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Contact inquiry not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting contact inquiry:\", error);\n      res.status(500).json({ error: \"Failed to delete contact inquiry\" });\n    }\n  });\n\n  // Vehicle inquiry routes\n  app.get(\"/api/vehicle-inquiries\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const inquiries = await storage.getAllVehicleInquiries();\n      res.json(inquiries);\n    } catch (error) {\n      console.error(\"Error fetching vehicle inquiries:\", error);\n      res.status(500).json({ error: \"Failed to fetch vehicle inquiries\" });\n    }\n  });\n\n  app.post(\"/api/vehicle-inquiries\", async (req, res) => {\n    try {\n      const validatedData = insertVehicleInquirySchema.parse(req.body);\n      const inquiry = await storage.createVehicleInquiry(validatedData);\n      res.status(201).json(inquiry);\n    } catch (error: any) {\n      console.error(\"Error creating vehicle inquiry:\", error);\n      if (error.name === \"ZodError\") {\n        res.status(400).json({ \n          error: \"Validation failed\", \n          details: error.errors \n        });\n      } else {\n        res.status(500).json({ error: \"Failed to create vehicle inquiry\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/vehicle-inquiries/:id\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const success = await storage.deleteVehicleInquiry(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Vehicle inquiry not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting vehicle inquiry:\", error);\n      res.status(500).json({ error: \"Failed to delete vehicle inquiry\" });\n    }\n  });\n\n  // Marketing source routes\n  app.get(\"/api/marketing-sources\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const sources = await storage.getAllMarketingSources();\n      res.json(sources);\n    } catch (error) {\n      console.error(\"Error fetching marketing sources:\", error);\n      res.status(500).json({ error: \"Failed to fetch marketing sources\" });\n    }\n  });\n\n  app.post(\"/api/marketing-sources\", async (req, res) => {\n    try {\n      const validatedData = insertMarketingSourceSchema.parse(req.body);\n      const source = await storage.createMarketingSource(validatedData);\n      res.status(201).json(source);\n    } catch (error) {\n      console.error(\"Error creating marketing source:\", error);\n      res.status(400).json({ error: \"Invalid marketing source data\" });\n    }\n  });\n\n  app.get(\"/api/marketing-sources/stats\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getMarketingSourceStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching marketing source stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch marketing source stats\" });\n    }\n  });\n\n  // Stripe payment routes for broker service\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    if (!stripe) {\n      return res.status(500).json({ \n        error: \"Stripe not configured. Please contact administrator to set up payment processing.\" \n      });\n    }\n\n    try {\n      const { amount } = req.body;\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"usd\",\n        automatic_payment_methods: {\n          enabled: true,\n        },\n        metadata: {\n          service: \"broker_deposit\",\n          description: \"Castle Motors Auto Broker Service Deposit\"\n        }\n      });\n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ \n        error: \"Error creating payment intent: \" + error.message \n      });\n    }\n  });\n\n  // Object storage routes for vehicle images\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error serving object:\", error);\n      res.status(404).json({ error: \"File not found\" });\n    }\n  });\n\n  app.post(\"/api/objects/upload\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.put(\"/api/vehicle-images\", isAdminAuthenticated, async (req, res) => {\n    if (!req.body.imageURL) {\n      return res.status(400).json({ error: \"imageURL is required\" });\n    }\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = objectStorageService.normalizeObjectEntityPath(req.body.imageURL);\n      \n      // Process the uploaded image (resize and watermark)\n      try {\n        // Extract bucket and object name from the URL for processing\n        const url = new URL(req.body.imageURL);\n        const pathParts = url.pathname.split('/');\n        const bucketName = pathParts[1]; // First part after /\n        const objectName = pathParts.slice(2).join('/'); // Rest of the path\n        \n        // Import and use image processor\n        const { imageProcessor } = await import('./imageProcessor');\n        await imageProcessor.processAndReplaceImage(bucketName, objectName);\n        \n        console.log(\"Image processed successfully with resize and watermark\");\n      } catch (processingError) {\n        console.error(\"Error processing image, but continuing:\", processingError);\n        // Continue even if image processing fails\n      }\n      \n      // If vehicleId is provided, update the vehicle's images array\n      if (req.body.vehicleId) {\n        const vehicle = await storage.getVehicleById(req.body.vehicleId);\n        if (!vehicle) {\n          return res.status(404).json({ error: \"Vehicle not found\" });\n        }\n\n        const currentImages = vehicle.images || [];\n        const updatedImages = [...currentImages, objectPath];\n        \n        await storage.updateVehicle(req.body.vehicleId, { images: updatedImages });\n      }\n\n      res.status(200).json({ objectPath });\n    } catch (error) {\n      console.error(\"Error processing vehicle image:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin endpoint to process existing vehicle images\n  app.post(\"/api/admin/process-images\", isAdminAuthenticated, async (req, res) => {\n    try {\n      const vehicles = await storage.getAllVehicles();\n      let processedCount = 0;\n      let errorCount = 0;\n\n      for (const vehicle of vehicles) {\n        if (vehicle.images && vehicle.images.length > 0) {\n          for (const imagePath of vehicle.images) {\n            try {\n              // Skip if already processed or if it's not an object storage path\n              if (!imagePath.startsWith('/objects/')) continue;\n\n              // Extract bucket and object name from path\n              const pathParts = imagePath.split('/');\n              if (pathParts.length < 3) continue;\n              \n              const bucketName = pathParts[2]; // After /objects/\n              const objectName = pathParts.slice(3).join('/'); // Rest of the path\n\n              // Import and process image\n              const { imageProcessor } = await import('./imageProcessor');\n              await imageProcessor.processAndReplaceImage(bucketName, objectName);\n              processedCount++;\n            } catch (error) {\n              console.error(`Error processing image ${imagePath}:`, error);\n              errorCount++;\n            }\n          }\n        }\n      }\n\n      res.json({\n        message: \"Image processing completed\",\n        processedCount,\n        errorCount,\n        totalVehicles: vehicles.length\n      });\n    } catch (error) {\n      console.error(\"Error in bulk image processing:\", error);\n      res.status(500).json({ error: \"Failed to process images\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16383},"server/storage.ts":{"content":"import { vehicles, brokerRequests, contactInquiries, vehicleInquiries, marketingSources, users, adminUsers, type Vehicle, type InsertVehicle, type BrokerRequest, type InsertBrokerRequest, type ContactInquiry, type InsertContactInquiry, type VehicleInquiry, type InsertVehicleInquiry, type MarketingSource, type InsertMarketingSource, type User, type InsertUser, type AdminUser, type InsertAdminUser } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Admin user methods\n  getAdminUserByUsername(username: string): Promise<AdminUser | undefined>;\n  createAdminUser(user: InsertAdminUser): Promise<AdminUser>;\n  initializeDefaultAdmin(): Promise<void>;\n  \n  // Vehicle methods\n  getAllVehicles(): Promise<Vehicle[]>;\n  getVehicleById(id: string): Promise<Vehicle | undefined>;\n  createVehicle(vehicle: InsertVehicle): Promise<Vehicle>;\n  updateVehicle(id: string, vehicle: Partial<InsertVehicle>): Promise<Vehicle | undefined>;\n  deleteVehicle(id: string): Promise<boolean>;\n  \n  // Broker request methods\n  getAllBrokerRequests(): Promise<BrokerRequest[]>;\n  createBrokerRequest(request: InsertBrokerRequest): Promise<BrokerRequest>;\n  \n  // Contact inquiry methods\n  getAllContactInquiries(): Promise<ContactInquiry[]>;\n  createContactInquiry(inquiry: InsertContactInquiry): Promise<ContactInquiry>;\n  deleteContactInquiry(id: string): Promise<boolean>;\n  \n  // Vehicle inquiry methods\n  getAllVehicleInquiries(): Promise<VehicleInquiry[]>;\n  createVehicleInquiry(inquiry: InsertVehicleInquiry): Promise<VehicleInquiry>;\n  deleteVehicleInquiry(id: string): Promise<boolean>;\n  \n  // Marketing source methods\n  getAllMarketingSources(): Promise<MarketingSource[]>;\n  createMarketingSource(source: InsertMarketingSource): Promise<MarketingSource>;\n  getMarketingSourceStats(): Promise<{ source: string; count: number; percentage: number }[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Admin user methods\n  async getAdminUserByUsername(username: string): Promise<AdminUser | undefined> {\n    const [adminUser] = await db.select().from(adminUsers).where(eq(adminUsers.username, username));\n    return adminUser || undefined;\n  }\n\n  async createAdminUser(insertAdminUser: InsertAdminUser): Promise<AdminUser> {\n    const [adminUser] = await db\n      .insert(adminUsers)\n      .values(insertAdminUser)\n      .returning();\n    return adminUser;\n  }\n\n  async initializeDefaultAdmin(): Promise<void> {\n    // Check if default admin already exists\n    const existingAdmin = await this.getAdminUserByUsername(\"Castle123\");\n    if (existingAdmin) {\n      return; // Default admin already exists\n    }\n\n    // Create default admin user\n    const hashedPassword = await bcrypt.hash(\"Castle877\", 10);\n    await this.createAdminUser({\n      username: \"Castle123\",\n      password: hashedPassword,\n      email: \"castlemotorsatl@gmail.com\"\n    });\n  }\n\n  // Vehicle methods\n  async getAllVehicles(): Promise<Vehicle[]> {\n    return await db.select().from(vehicles).orderBy(desc(vehicles.createdAt));\n  }\n\n  async getVehicleById(id: string): Promise<Vehicle | undefined> {\n    const [vehicle] = await db.select().from(vehicles).where(eq(vehicles.id, id));\n    return vehicle || undefined;\n  }\n\n  async createVehicle(vehicle: InsertVehicle): Promise<Vehicle> {\n    const [newVehicle] = await db\n      .insert(vehicles)\n      .values(vehicle)\n      .returning();\n    return newVehicle;\n  }\n\n  async updateVehicle(id: string, vehicle: Partial<InsertVehicle>): Promise<Vehicle | undefined> {\n    const [updatedVehicle] = await db\n      .update(vehicles)\n      .set(vehicle)\n      .where(eq(vehicles.id, id))\n      .returning();\n    return updatedVehicle || undefined;\n  }\n\n  async deleteVehicle(id: string): Promise<boolean> {\n    const result = await db.delete(vehicles).where(eq(vehicles.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Broker request methods\n  async getAllBrokerRequests(): Promise<BrokerRequest[]> {\n    return await db.select().from(brokerRequests).orderBy(desc(brokerRequests.createdAt));\n  }\n\n  async createBrokerRequest(request: any): Promise<BrokerRequest> {\n    // Handle both old format (with individual vehicle fields) and new format (with vehicleSelections array)\n    const brokerRequestData: any = {\n      firstName: request.firstName,\n      lastName: request.lastName,\n      email: request.email,\n      phone: request.phone,\n      maxBudget: request.maxBudget,\n      mileageRange: request.mileageRange,\n      additionalRequirements: request.additionalRequirements,\n      depositAgreed: request.depositAgreed || \"true\"\n    };\n\n    // If new format with vehicleSelections, use it\n    if (request.vehicleSelections && Array.isArray(request.vehicleSelections)) {\n      brokerRequestData.vehicleSelections = request.vehicleSelections;\n      // Clear old fields to maintain compatibility\n      brokerRequestData.vehicleMake = \"\";\n      brokerRequestData.vehicleModel = \"\";\n      brokerRequestData.yearRange = \"\";\n    } else {\n      // Old format - convert to new format\n      brokerRequestData.vehicleSelections = [{\n        make: request.vehicleMake || \"\",\n        model: request.vehicleModel || \"\",\n        yearRange: request.yearRange || \"\"\n      }];\n      // Keep old fields for backward compatibility\n      brokerRequestData.vehicleMake = request.vehicleMake || \"\";\n      brokerRequestData.vehicleModel = request.vehicleModel || \"\";\n      brokerRequestData.yearRange = request.yearRange || \"\";\n    }\n\n    const [newRequest] = await db\n      .insert(brokerRequests)\n      .values(brokerRequestData)\n      .returning();\n    return newRequest;\n  }\n\n  // Contact inquiry methods\n  async getAllContactInquiries(): Promise<ContactInquiry[]> {\n    return await db.select().from(contactInquiries).orderBy(desc(contactInquiries.createdAt));\n  }\n\n  async createContactInquiry(inquiry: InsertContactInquiry): Promise<ContactInquiry> {\n    const [newInquiry] = await db\n      .insert(contactInquiries)\n      .values(inquiry)\n      .returning();\n    return newInquiry;\n  }\n\n  async deleteContactInquiry(id: string): Promise<boolean> {\n    const result = await db.delete(contactInquiries).where(eq(contactInquiries.id, id));\n    return result.rowCount !== undefined && result.rowCount > 0;\n  }\n\n  // Vehicle inquiry methods\n  async getAllVehicleInquiries(): Promise<VehicleInquiry[]> {\n    return await db.select().from(vehicleInquiries).orderBy(desc(vehicleInquiries.createdAt));\n  }\n\n  async createVehicleInquiry(inquiry: InsertVehicleInquiry): Promise<VehicleInquiry> {\n    const [newInquiry] = await db\n      .insert(vehicleInquiries)\n      .values(inquiry)\n      .returning();\n    return newInquiry;\n  }\n\n  async deleteVehicleInquiry(id: string): Promise<boolean> {\n    const result = await db.delete(vehicleInquiries).where(eq(vehicleInquiries.id, id));\n    return result.rowCount !== undefined && result.rowCount > 0;\n  }\n\n  // Marketing source methods\n  async getAllMarketingSources(): Promise<MarketingSource[]> {\n    return await db.select().from(marketingSources).orderBy(desc(marketingSources.createdAt));\n  }\n\n  async createMarketingSource(source: InsertMarketingSource): Promise<MarketingSource> {\n    const [newSource] = await db\n      .insert(marketingSources)\n      .values(source)\n      .returning();\n    return newSource;\n  }\n\n  async getMarketingSourceStats(): Promise<{ source: string; count: number; percentage: number }[]> {\n    const allSources = await db.select().from(marketingSources);\n    const totalCount = allSources.length;\n    \n    if (totalCount === 0) {\n      return [];\n    }\n\n    const counts: { [key: string]: number } = {};\n    allSources.forEach(source => {\n      counts[source.source] = (counts[source.source] || 0) + 1;\n    });\n\n    return Object.entries(counts).map(([source, count]) => ({\n      source,\n      count,\n      percentage: Math.round((count / totalCount) * 100)\n    })).sort((a, b) => b.count - a.count);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8738},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Admin users table for admin authentication\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(), // hashed password\n  email: text(\"email\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const vehicles = pgTable(\"vehicles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  make: text(\"make\").notNull(),\n  model: text(\"model\").notNull(),\n  year: integer(\"year\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  mileage: integer(\"mileage\").default(0),\n  transmission: text(\"transmission\").default(\"\"),\n  drivetrain: text(\"drivetrain\").default(\"\"),\n  features: text(\"features\").default(\"\"),\n  description: text(\"description\").default(\"\"),\n  images: json(\"images\").$type<string[]>().default([]),\n  status: text(\"status\").notNull().default(\"available\"), // available, sold, pending\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const brokerRequests = pgTable(\"broker_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  vehicleSelections: json(\"vehicle_selections\").$type<Array<{make: string, model: string, yearRange: string}>>().notNull().default([]),\n  maxBudget: text(\"max_budget\").notNull(),\n  mileageRange: text(\"mileage_range\"),\n  additionalRequirements: text(\"additional_requirements\"),\n  depositAgreed: text(\"deposit_agreed\").notNull().default(\"true\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_progress, completed, cancelled\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactInquiries = pgTable(\"contact_inquiries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"new\"), // new, responded, closed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const vehicleInquiries = pgTable(\"vehicle_inquiries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vehicleId: varchar(\"vehicle_id\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  message: text(\"message\"),\n  status: text(\"status\").notNull().default(\"new\"), // new, responded, closed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const marketingSources = pgTable(\"marketing_sources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  source: text(\"source\").notNull(), // facebook, google, instagram, sign, referral\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertVehicleSchema = createInsertSchema(vehicles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBrokerRequestSchema = createInsertSchema(brokerRequests).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n});\n\nexport const insertContactInquirySchema = createInsertSchema(contactInquiries).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n});\n\nexport const insertVehicleInquirySchema = createInsertSchema(vehicleInquiries).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n});\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMarketingSourceSchema = createInsertSchema(marketingSources).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\nexport type Vehicle = typeof vehicles.$inferSelect;\n\nexport type InsertBrokerRequest = z.infer<typeof insertBrokerRequestSchema>;\nexport type BrokerRequest = typeof brokerRequests.$inferSelect;\n\nexport type InsertContactInquiry = z.infer<typeof insertContactInquirySchema>;\nexport type ContactInquiry = typeof contactInquiries.$inferSelect;\n\nexport type InsertVehicleInquiry = z.infer<typeof insertVehicleInquirySchema>;\nexport type VehicleInquiry = typeof vehicleInquiries.$inferSelect;\n\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\n\nexport type InsertMarketingSource = z.infer<typeof insertMarketingSourceSchema>;\nexport type MarketingSource = typeof marketingSources.$inferSelect;\n","size_bytes":5417},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Inventory from \"@/pages/inventory\";\nimport Broker from \"@/pages/broker\";\nimport Contact from \"@/pages/contact\";\nimport Terms from \"@/pages/terms\";\nimport VehicleDetails from \"@/pages/VehicleDetails\";\nimport Navigation from \"@/components/Navigation\";\nimport AdminLogin from \"@/pages/admin/login\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\n\nfunction Router() {\n  const [location] = useLocation();\n\n  // Scroll to top whenever the route changes\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/inventory\" component={Inventory} />\n        <Route path=\"/broker\" component={Broker} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/terms\" component={Terms} />\n        <Route path=\"/vehicle/:id\" component={VehicleDetails} />\n        <Route path=\"/admin/login\" component={AdminLogin} />\n        <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1751},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(174, 100%, 29%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(60, 100%, 50%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(178, 92%, 36%);\n  --chart-1: hsl(178, 92%, 36%);\n  --chart-2: hsl(65, 92%, 56%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(210, 40%, 96%);\n  --sidebar-foreground: hsl(222, 84%, 5%);\n  --sidebar-primary: hsl(178, 92%, 36%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(178, 92%, 36%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(178, 92%, 36%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(178, 92%, 36% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(178, 92%, 36% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(178, 92%, 36% / 0.00), 0px 1px 2px -1px hsl(178, 92%, 36% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(178, 92%, 36% / 0.00), 0px 1px 2px -1px hsl(178, 92%, 36% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(178, 92%, 36% / 0.00), 0px 2px 4px -1px hsl(178, 92%, 36% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(178, 92%, 36% / 0.00), 0px 4px 6px -1px hsl(178, 92%, 36% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(178, 92%, 36% / 0.00), 0px 8px 10px -1px hsl(178, 92%, 36% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(178, 92%, 36% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 10%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(174, 100%, 29%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(60, 100%, 50%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 33%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --ring: hsl(178, 92%, 36%);\n  --chart-1: hsl(178, 92%, 36%);\n  --chart-2: hsl(65, 92%, 56%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(222, 84%, 10%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(178, 92%, 36%);\n  --sidebar-primary-foreground: hsl(222, 84%, 5%);\n  --sidebar-accent: hsl(217, 33%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 33%, 17%);\n  --sidebar-ring: hsl(178, 92%, 36%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.logo-castle {\n  background: linear-gradient(135deg, var(--primary), hsl(178, 92%, 30%));\n  mask: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M20 20h15v-5h10v5h20v-5h10v5h15v60c0 5-5 10-10 10H30c-5 0-10-5-10-10V20z'/%3E%3C/svg%3E\") no-repeat center;\n  mask-size: contain;\n}\n","size_bytes":4036},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BrokerForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { insertBrokerRequestSchema, type InsertBrokerRequest } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, Trash2, CreditCard, CheckCircle } from \"lucide-react\";\nimport PaymentCheckout from \"@/components/PaymentCheckout\";\nimport { Link } from \"wouter\";\nimport { z } from \"zod\";\n\nconst carMakes = [\n  \"Acura\", \"Audi\", \"BMW\", \"Cadillac\", \"Chevrolet\", \"Chrysler\", \"Dodge\",\n  \"Ford\", \"GMC\", \"Honda\", \"Hyundai\", \"Infiniti\", \"Jeep\", \"Kia\", \"Lexus\",\n  \"Mazda\", \"Mercedes-Benz\", \"Nissan\", \"Subaru\", \"Toyota\", \"Volkswagen\", \"Volvo\"\n];\n\nconst years = [\n  \"2024\", \"2023\", \"2022\", \"2021\", \"2020\", \"2019\", \"2018\", \"2017\", \"2016\", \"2015\", \"2014 or older\"\n];\n\nconst mileageRanges = [\n  \"Any Mileage\", \"0 - 25,000 miles\", \"25,000 - 50,000 miles\", \n  \"50,000 - 75,000 miles\", \"75,000 - 100,000 miles\", \"100,000+ miles\"\n];\n\n// Extended schema for multiple vehicle selections\nconst extendedBrokerRequestSchema = insertBrokerRequestSchema.extend({\n  vehicleSelections: z.array(z.object({\n    make: z.string().min(1, \"Make is required\"),\n    model: z.string().min(1, \"Model is required\"),\n    yearRange: z.string().min(1, \"Year range is required\")\n  })).min(1, \"At least one vehicle selection is required\").max(5, \"Maximum 5 vehicle selections allowed\")\n});\n\ntype ExtendedBrokerRequest = z.infer<typeof extendedBrokerRequestSchema>;\n\nexport default function BrokerForm() {\n  const { toast } = useToast();\n  const [showPayment, setShowPayment] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [savedFormData, setSavedFormData] = useState<ExtendedBrokerRequest | null>(null);\n\n  const form = useForm<ExtendedBrokerRequest>({\n    resolver: zodResolver(extendedBrokerRequestSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      vehicleSelections: [{ make: \"\", model: \"\", yearRange: \"\" }],\n      maxBudget: \"\",\n      mileageRange: \"\",\n      additionalRequirements: \"\",\n      depositAgreed: \"true\",\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"vehicleSelections\"\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: ExtendedBrokerRequest) => {\n      const response = await apiRequest(\"POST\", \"/api/broker-requests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsCompleted(true);\n      toast({\n        title: \"Request & Payment Complete!\",\n        description: \"Your auto broker request has been submitted and payment processed successfully. We'll contact you within 24 hours to begin your vehicle search.\",\n      });\n      form.reset();\n      setSavedFormData(null);\n      setShowPayment(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ExtendedBrokerRequest) => {\n    // Save form data and show payment modal\n    setSavedFormData(data);\n    setShowPayment(true);\n  };\n\n  const handlePaymentSuccess = () => {\n    // Submit the broker request after successful payment\n    if (savedFormData) {\n      submitMutation.mutate(savedFormData);\n    }\n  };\n\n  const handlePaymentClose = () => {\n    setShowPayment(false);\n    setSavedFormData(null);\n  };\n\n  const addVehicleSelection = () => {\n    if (fields.length < 5) {\n      append({ make: \"\", model: \"\", yearRange: \"\" });\n    }\n  };\n\n  const removeVehicleSelection = (index: number) => {\n    if (fields.length > 1) {\n      remove(index);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"form-broker-request\">\n        {/* Personal Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Personal Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"label-first-name\">First Name *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-first-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"label-last-name\">Last Name *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-last-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"label-email\">Email *</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"label-phone\">Phone *</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"tel\" data-testid=\"input-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Vehicle Selections */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center justify-between\">\n              Vehicle Preferences (Up to 5)\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={addVehicleSelection}\n                disabled={fields.length >= 5}\n                data-testid=\"button-add-vehicle\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Vehicle\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {fields.map((field, index) => (\n              <div key={field.id} className=\"border border-border rounded-lg p-4 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">Vehicle Option {index + 1}</h4>\n                  {fields.length > 1 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeVehicleSelection(index)}\n                      data-testid={`button-remove-vehicle-${index}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </div>\n\n                <div className=\"grid md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name={`vehicleSelections.${index}.make`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel data-testid={`label-vehicle-make-${index}`}>Vehicle Make *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid={`select-vehicle-make-${index}`}>\n                              <SelectValue placeholder=\"Select Make...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {carMakes.map((make) => (\n                              <SelectItem key={make} value={make.toLowerCase()} data-testid={`option-make-${make.toLowerCase()}-${index}`}>\n                                {make}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name={`vehicleSelections.${index}.model`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel data-testid={`label-vehicle-model-${index}`}>Model *</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., Camry, Accord, 3 Series\" data-testid={`input-vehicle-model-${index}`} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name={`vehicleSelections.${index}.yearRange`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel data-testid={`label-year-range-${index}`}>Year Range *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid={`select-year-range-${index}`}>\n                              <SelectValue placeholder=\"Select Year...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {years.map((year) => (\n                              <SelectItem key={year} value={year} data-testid={`option-year-${year.replace(\" \", \"-\").toLowerCase()}-${index}`}>\n                                {year}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Budget and Preferences */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Budget & Preferences</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"maxBudget\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"label-max-budget\">Maximum Budget *</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"e.g., $25,000\" data-testid=\"input-max-budget\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"mileageRange\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"label-mileage-range\">Preferred Mileage Range</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-mileage-range\">\n                          <SelectValue placeholder=\"Any Mileage\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {mileageRanges.map((range) => (\n                          <SelectItem key={range} value={range} data-testid={`option-mileage-${range.replace(/[^a-zA-Z0-9]/g, \"-\").toLowerCase()}`}>\n                            {range}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"additionalRequirements\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel data-testid=\"label-additional-requirements\">Additional Requirements or Preferences</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      value={field.value || \"\"}\n                      rows={4}\n                      placeholder=\"Tell us about any specific features, colors, or other requirements...\"\n                      data-testid=\"textarea-additional-requirements\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Agreement */}\n        <FormField\n          control={form.control}\n          name=\"depositAgreed\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n              <FormControl>\n                <Checkbox\n                  checked={field.value === \"true\"}\n                  onCheckedChange={(checked) => field.onChange(checked ? \"true\" : \"false\")}\n                  data-testid=\"checkbox-deposit-agreement\"\n                />\n              </FormControl>\n              <div className=\"space-y-1 leading-none\">\n                <FormLabel className=\"text-sm text-muted-foreground\" data-testid=\"label-deposit-agreement\">\n                  I understand that a $500 deposit is required to begin the broker service, and I agree to the terms and conditions. *\n                </FormLabel>\n                <div className=\"mt-2\">\n                  <Link \n                    href=\"/terms\" \n                    className=\"text-xs text-primary hover:text-primary/80 underline transition-colors\"\n                    data-testid=\"link-terms-conditions\"\n                  >\n                    View Full Terms & Conditions\n                  </Link>\n                </div>\n                <FormMessage />\n              </div>\n            </FormItem>\n          )}\n        />\n\n        <Button\n          type=\"submit\"\n          className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n          disabled={submitMutation.isPending || isCompleted}\n          data-testid=\"button-submit-broker-request\"\n        >\n          {submitMutation.isPending ? (\n            <div className=\"flex items-center gap-2\">\n              <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n              Processing...\n            </div>\n          ) : isCompleted ? (\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4\" />\n              Request Complete!\n            </div>\n          ) : (\n            <div className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-4 w-4\" />\n              Proceed to Payment ($500)\n            </div>\n          )}\n        </Button>\n      </form>\n\n      {/* Payment Modal */}\n      <PaymentCheckout\n        isOpen={showPayment}\n        onSuccess={handlePaymentSuccess}\n        onClose={handlePaymentClose}\n      />\n\n      {/* Success State */}\n      {isCompleted && (\n        <Card className=\"mt-6 border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-900/20\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-4\">\n              <CheckCircle className=\"h-12 w-12 text-green-600 mx-auto\" />\n              <h3 className=\"text-lg font-semibold text-green-900 dark:text-green-100\">\n                Request & Payment Complete!\n              </h3>\n              <p className=\"text-green-800 dark:text-green-200 max-w-md mx-auto\">\n                Your auto broker request has been submitted successfully and your $500 deposit has been processed. \n                We'll contact you within 24 hours to begin your personalized vehicle search.\n              </p>\n              <Button\n                onClick={() => {\n                  setIsCompleted(false);\n                  form.reset();\n                }}\n                variant=\"outline\"\n                className=\"mt-4\"\n              >\n                Submit Another Request\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </Form>\n  );\n}","size_bytes":17924},"client/src/components/ContactForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { insertContactInquirySchema, type InsertContactInquiry } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nconst subjects = [\n  \"General Inquiry\",\n  \"Vehicle Information\",\n  \"Auto Broker Service\",\n  \"Schedule Test Drive\",\n  \"Trade-In Evaluation\",\n];\n\n\nexport default function ContactForm() {\n  const { toast } = useToast();\n\n  const form = useForm<InsertContactInquiry>({\n    resolver: zodResolver(insertContactInquirySchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: InsertContactInquiry) => {\n      // ALL contact form submissions should go to Contact Inquiries\n      const response = await apiRequest(\"POST\", \"/api/contact-inquiries\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent\",\n        description: \"Your message has been sent successfully. We'll get back to you soon.\",\n      });\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertContactInquiry) => {\n    submitMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"form-contact\">\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel data-testid=\"label-contact-name\">Name</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-contact-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel data-testid=\"label-contact-email\">Email</FormLabel>\n                <FormControl>\n                  <Input {...field} type=\"email\" data-testid=\"input-contact-email\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n\n        <FormField\n          control={form.control}\n          name=\"subject\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel data-testid=\"label-contact-subject\">Subject</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-contact-subject\">\n                    <SelectValue placeholder=\"Select subject...\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {subjects.map((subject) => (\n                    <SelectItem key={subject} value={subject} data-testid={`option-subject-${subject.replace(/\\s+/g, \"-\").toLowerCase()}`}>\n                      {subject}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"message\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel data-testid=\"label-contact-message\">Message</FormLabel>\n              <FormControl>\n                <Textarea\n                  {...field}\n                  rows={4}\n                  placeholder=\"How can we help you?\"\n                  data-testid=\"textarea-contact-message\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button\n          type=\"submit\"\n          className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n          disabled={submitMutation.isPending}\n          data-testid=\"button-send-message\"\n        >\n          {submitMutation.isPending ? \"Sending Message...\" : \"Send Message\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":4855},"client/src/components/Navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const navItems = [\n    { path: \"/\", label: \"Home\" },\n    { path: \"/inventory\", label: \"Inventory\" },\n    { path: \"/broker\", label: \"Broker Service\" },\n    { path: \"/contact\", label: \"Contact\" },\n  ];\n\n  return (\n    <nav className=\"bg-card shadow-lg sticky top-0 z-50 border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-24\">\n          {/* Logo Section */}\n          <Link href=\"/\" className=\"flex items-center\" data-testid=\"link-home\">\n            <img \n              src=\"/castle-motors-logo.png\" \n              alt=\"Castle Motors\"\n              className=\"h-20 w-auto object-contain\"\n            />\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={`font-medium transition-colors ${\n                  location === item.path\n                    ? \"text-primary\"\n                    : \"text-foreground hover:text-primary\"\n                }`}\n                data-testid={`link-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </div>\n\n          {/* Contact Info */}\n          <div className=\"hidden lg:flex items-center space-x-4 text-sm text-muted-foreground\">\n            <span data-testid=\"text-phone\">📞 Sales and Service: (678) 744-2145</span>\n            <span data-testid=\"text-broker-phone\">🚗 Broker Service: (404) 220-9234</span>\n            <span data-testid=\"text-location\">📍 Marietta, GA</span>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden border-t border-border bg-card\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.path}\n                  href={item.path}\n                  className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                    location === item.path\n                      ? \"text-primary bg-accent\"\n                      : \"text-foreground hover:text-primary hover:bg-accent\"\n                  }`}\n                  onClick={() => setIsMenuOpen(false)}\n                  data-testid={`mobile-link-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3353},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (result: { successful: Array<{ uploadURL: string }> }) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760,\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    setIsUploading(true);\n    try {\n      const uploadedFiles = [];\n      \n      for (let i = 0; i < Math.min(files.length, maxNumberOfFiles); i++) {\n        const file = files[i];\n        if (file.size > maxFileSize) {\n          console.error(`File ${file.name} is too large`);\n          continue;\n        }\n\n        // Get upload parameters\n        const { url } = await onGetUploadParameters();\n        \n        // Upload file\n        const response = await fetch(url, {\n          method: 'PUT',\n          body: file,\n          headers: {\n            'Content-Type': file.type,\n          },\n        });\n\n        if (response.ok) {\n          uploadedFiles.push({ uploadURL: url });\n        }\n      }\n\n      onComplete?.({ successful: uploadedFiles });\n    } catch (error) {\n      console.error('Upload failed:', error);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  return (\n    <div>\n      <Input\n        type=\"file\"\n        multiple={maxNumberOfFiles > 1}\n        accept=\"image/*\"\n        onChange={handleFileUpload}\n        disabled={isUploading}\n        className=\"hidden\"\n        id=\"file-upload\"\n      />\n      <Button \n        type=\"button\"\n        onClick={() => document.getElementById('file-upload')?.click()}\n        className={buttonClassName}\n        disabled={isUploading}\n        data-testid=\"button-upload-files\"\n      >\n        {isUploading ? 'Uploading...' : children}\n      </Button>\n    </div>\n  );\n}","size_bytes":2312},"client/src/components/VehicleCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Vehicle } from \"@shared/schema\";\n\ninterface VehicleCardProps {\n  vehicle: Vehicle;\n  onUpdate?: () => void;\n  onViewDetails?: (vehicle: Vehicle) => void;\n}\n\nexport default function VehicleCard({ vehicle, onUpdate, onViewDetails }: VehicleCardProps) {\n  const formatPrice = (price: string) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      maximumFractionDigits: 0,\n    }).format(parseFloat(price));\n  };\n\n  const getMainImage = () => {\n    if (vehicle.images && vehicle.images.length > 0) {\n      return vehicle.images[0];\n    }\n    // Fallback image based on vehicle make\n    const makeImages: Record<string, string> = {\n      bmw: \"https://images.unsplash.com/photo-1555215695-3004980ad54e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      toyota: \"https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      honda: \"https://images.unsplash.com/photo-1503376780353-7e6692767b70?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n    };\n    return makeImages[vehicle.make.toLowerCase()] || \"https://images.unsplash.com/photo-1494976388531-d1058494cdd8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\";\n  };\n\n  return (\n    <Card className=\"overflow-hidden border border-border shadow-lg hover:shadow-xl transition-shadow\" data-testid={`card-vehicle-${vehicle.id}`}>\n      <img\n        src={getMainImage()}\n        alt={`${vehicle.year} ${vehicle.make} ${vehicle.model}`}\n        className=\"w-full h-48 object-cover bg-gray-100\"\n        data-testid={`img-vehicle-${vehicle.id}`}\n      />\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start mb-3\">\n          <h3 className=\"text-xl font-semibold text-foreground\" data-testid={`text-vehicle-title-${vehicle.id}`}>\n            {vehicle.year} {vehicle.make} {vehicle.model}\n          </h3>\n          <Badge className=\"bg-secondary text-secondary-foreground\" data-testid={`text-vehicle-price-${vehicle.id}`}>\n            {formatPrice(vehicle.price)}\n          </Badge>\n        </div>\n        \n        <div className=\"text-muted-foreground space-y-1 mb-4\">\n          <p data-testid={`text-vehicle-details-${vehicle.id}`}>\n            {vehicle.mileage ? `${vehicle.mileage.toLocaleString()} miles` : 'Mileage not specified'} \n            {vehicle.transmission && ` • ${vehicle.transmission}`}\n            {vehicle.drivetrain && ` • ${vehicle.drivetrain}`}\n          </p>\n          {vehicle.features && vehicle.features.trim() && (\n            <div className=\"space-y-1\">\n              <p className=\"text-xs text-muted-foreground font-medium\">Features:</p>\n              <div className=\"flex flex-wrap gap-1\">\n                {vehicle.features.split(\", \").slice(0, 3).map((feature, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs px-1 py-0\">\n                    {feature.trim()}\n                  </Badge>\n                ))}\n                {vehicle.features.split(\", \").length > 3 && (\n                  <Badge variant=\"outline\" className=\"text-xs px-1 py-0 bg-muted\">\n                    +{vehicle.features.split(\", \").length - 3} more\n                  </Badge>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        <Button \n          onClick={() => onViewDetails?.(vehicle)}\n          className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n          data-testid={`button-view-details-${vehicle.id}`}\n        >\n          View Details\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3769},"client/src/components/VehicleForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { insertVehicleSchema, type InsertVehicle, type Vehicle } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport type { UploadResult } from \"@uppy/core\";\n\ninterface VehicleFormProps {\n  onSuccess: () => void;\n  vehicle?: Vehicle;\n  mode?: 'create' | 'edit';\n}\n\nconst carMakes = [\n  \"Acura\", \"Audi\", \"BMW\", \"Cadillac\", \"Chevrolet\", \"Chrysler\", \"Dodge\",\n  \"Ford\", \"GMC\", \"Honda\", \"Hyundai\", \"Infiniti\", \"Jeep\", \"Kia\", \"Lexus\",\n  \"Mazda\", \"Mercedes-Benz\", \"Nissan\", \"Subaru\", \"Toyota\", \"Volkswagen\", \"Volvo\"\n];\n\nconst transmissionTypes = [\"Manual\", \"Automatic\", \"CVT\"];\nconst drivetrainTypes = [\"FWD\", \"RWD\", \"AWD\", \"4WD\"];\n\nconst vehicleFeatures = [\n  // Comfort & Convenience\n  \"Air Conditioning\", \"Climate Control\", \"Heated Seats\", \"Cooled Seats\", \"Leather Seats\",\n  \"Power Seats\", \"Memory Seats\", \"Lumbar Support\", \"Sunroof\", \"Moonroof\", \"Panoramic Roof\",\n  \"Remote Start\", \"Keyless Entry\", \"Push Button Start\", \"Cruise Control\", \"Adaptive Cruise Control\",\n  \"Automatic Headlights\", \"LED Headlights\", \"HID Headlights\", \"Fog Lights\", \"Tinted Windows\",\n  \n  // Technology & Entertainment\n  \"Navigation System\", \"GPS\", \"Backup Camera\", \"360-Degree Camera\", \"Parking Sensors\",\n  \"Bluetooth\", \"Apple CarPlay\", \"Android Auto\", \"USB Ports\", \"Wireless Charging\",\n  \"Premium Sound System\", \"Subwoofer\", \"CD Player\", \"Satellite Radio\", \"AM/FM Radio\",\n  \"Touchscreen Display\", \"Digital Instrument Cluster\", \"Head-Up Display\",\n  \n  // Safety & Security\n  \"Airbags\", \"Side Airbags\", \"Curtain Airbags\", \"Anti-lock Brakes (ABS)\", \"Electronic Stability Control\",\n  \"Traction Control\", \"Blind Spot Monitoring\", \"Lane Departure Warning\", \"Lane Keep Assist\",\n  \"Forward Collision Warning\", \"Automatic Emergency Braking\", \"Adaptive Headlights\",\n  \"Security System\", \"Alarm System\", \"Anti-theft System\", \"Immobilizer\",\n  \n  // Performance & Handling\n  \"Turbo\", \"Supercharger\", \"Sport Mode\", \"Eco Mode\", \"Manual Transmission\", \"Automatic Transmission\",\n  \"CVT\", \"Paddle Shifters\", \"Limited Slip Differential\", \"Sport Suspension\", \"Air Suspension\",\n  \"All-Wheel Drive\", \"Four-Wheel Drive\", \"Front-Wheel Drive\", \"Rear-Wheel Drive\",\n  \n  // Exterior Features\n  \"Alloy Wheels\", \"Chrome Wheels\", \"Run-flat Tires\", \"Spare Tire\", \"Roof Rack\", \"Tow Hitch\",\n  \"Power Windows\", \"Power Mirrors\", \"Heated Mirrors\", \"Side Steps\", \"Running Boards\",\n  \"Bed Liner\", \"Tonneau Cover\", \"Convertible Top\", \"Hardtop\", \"Soft Top\",\n  \n  // Interior Features\n  \"Third Row Seating\", \"Split-Folding Rear Seats\", \"Rear Entertainment System\", \"Rear Climate Control\",\n  \"Cup Holders\", \"Storage Compartments\", \"Cargo Net\", \"Cargo Cover\", \"Floor Mats\",\n  \"Wood Trim\", \"Carbon Fiber Trim\", \"Aluminum Trim\", \"Ambient Lighting\",\n  \n  // Fuel & Efficiency\n  \"Hybrid\", \"Plug-in Hybrid\", \"Electric\", \"Fuel Efficient\", \"Eco-Friendly\", \"Low Emissions\",\n  \n  // Warranty & Maintenance\n  \"Extended Warranty\", \"Certified Pre-Owned\", \"One Owner\", \"Clean Title\", \"Accident Free\",\n  \"Service Records\", \"Non-Smoker\", \"Garage Kept\"\n];\n\nexport default function VehicleForm({ onSuccess, vehicle, mode = 'create' }: VehicleFormProps) {\n  const { toast } = useToast();\n  const [currentVehicleId, setCurrentVehicleId] = useState<string | null>(vehicle?.id || null);\n  const [uploadedImages, setUploadedImages] = useState<string[]>(vehicle?.images || []);\n  const [selectedFeatures, setSelectedFeatures] = useState<string[]>(\n    vehicle?.features ? vehicle.features.split(\", \").filter(f => f.trim()) : []\n  );\n\n  // Update selected features when vehicle prop changes (for edit mode)\n  useEffect(() => {\n    if (vehicle?.features) {\n      setSelectedFeatures(vehicle.features.split(\", \").filter(f => f.trim()));\n    } else {\n      setSelectedFeatures([]);\n    }\n  }, [vehicle?.features]);\n\n  const form = useForm<InsertVehicle>({\n    resolver: zodResolver(insertVehicleSchema),\n    defaultValues: {\n      make: vehicle?.make || \"\",\n      model: vehicle?.model || \"\",\n      year: vehicle?.year || new Date().getFullYear(),\n      price: vehicle?.price || \"0\",\n      mileage: vehicle?.mileage || 0,\n      transmission: vehicle?.transmission || \"\",\n      drivetrain: vehicle?.drivetrain || \"\",\n      features: vehicle?.features || \"\",\n      description: vehicle?.description || \"\",\n      images: vehicle?.images || [],\n      status: vehicle?.status || \"available\",\n    },\n  });\n\n  const saveVehicleMutation = useMutation({\n    mutationFn: async (data: InsertVehicle) => {\n      const method = mode === 'edit' ? 'PUT' : 'POST';\n      const url = mode === 'edit' ? `/api/vehicles/${vehicle?.id}` : '/api/vehicles';\n      const response = await apiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: (savedVehicle) => {\n      setCurrentVehicleId(savedVehicle.id);\n      toast({\n        title: \"Success\",\n        description: mode === 'edit' ? \"Vehicle updated successfully!\" : \"Vehicle added successfully!\",\n      });\n      // Call parent success handler to refresh list and close form\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add vehicle. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: InsertVehicle) => {\n    // Include uploaded images and selected features in the data\n    const vehicleData = {\n      ...data,\n      images: uploadedImages,\n      features: selectedFeatures.join(\", \")\n    };\n    saveVehicleMutation.mutate(vehicleData);\n  };\n\n  const handleFeatureChange = (feature: string, checked: boolean) => {\n    setSelectedFeatures(prev => {\n      if (checked) {\n        return [...prev, feature];\n      } else {\n        return prev.filter(f => f !== feature);\n      }\n    });\n  };\n\n  const handleGetUploadParameters = async () => {\n    const response = await apiRequest(\"POST\", \"/api/objects/upload\", {});\n    const result = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: result.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    const newImages: string[] = [];\n    \n    for (const file of result.successful || []) {\n      if (file.uploadURL) {\n        try {\n          // Process the upload URL to get the proper object path\n          const response = await apiRequest(\"PUT\", \"/api/vehicle-images\", {\n            imageURL: file.uploadURL,\n          });\n          const data = await response.json();\n          // Use the normalized object path that can be served via /objects/ route\n          newImages.push(data.objectPath);\n        } catch (error) {\n          console.error(\"Error processing image:\", error);\n          // Extract object path from the Google Cloud Storage URL\n          const url = new URL(file.uploadURL);\n          const pathParts = url.pathname.split('/');\n          // Find the uploads part and get the file ID\n          const uploadsIndex = pathParts.findIndex(part => part === 'uploads');\n          if (uploadsIndex >= 0 && uploadsIndex < pathParts.length - 1) {\n            const fileId = pathParts[uploadsIndex + 1];\n            const normalizedPath = `/objects/uploads/${fileId}`;\n            newImages.push(normalizedPath);\n          }\n        }\n      }\n    }\n    \n    // Add new images to the current list\n    setUploadedImages(prev => [...prev, ...newImages]);\n    \n    toast({\n      title: \"Success\",\n      description: `${newImages.length} image(s) ready to be saved with vehicle!`,\n    });\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"form-add-vehicle\">\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"make\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel data-testid=\"label-vehicle-make\">Vehicle Make *</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-vehicle-make\">\n                      <SelectValue placeholder=\"Select Make...\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {carMakes.map((make) => (\n                      <SelectItem key={make} value={make} data-testid={`option-make-${make.toLowerCase()}`}>\n                        {make}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"model\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel data-testid=\"label-vehicle-model\">Model *</FormLabel>\n                <FormControl>\n                  <Input {...field} placeholder=\"e.g., Camry, Accord\" data-testid=\"input-vehicle-model\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"year\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel data-testid=\"label-vehicle-year\">Year *</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    type=\"number\"\n                    min=\"1990\"\n                    max={new Date().getFullYear() + 1}\n                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                    data-testid=\"input-vehicle-year\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"price\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel data-testid=\"label-vehicle-price\">Price *</FormLabel>\n                <FormControl>\n                  <Input {...field} placeholder=\"25000\" data-testid=\"input-vehicle-price\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <FormField\n            control={form.control}\n            name=\"mileage\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel data-testid=\"label-vehicle-mileage\">Mileage</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    type=\"number\"\n                    min=\"0\"\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                    data-testid=\"input-vehicle-mileage\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"transmission\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel data-testid=\"label-vehicle-transmission\">Transmission</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-vehicle-transmission\">\n                      <SelectValue placeholder=\"Select...\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {transmissionTypes.map((type) => (\n                      <SelectItem key={type} value={type} data-testid={`option-transmission-${type.toLowerCase()}`}>\n                        {type}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"drivetrain\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel data-testid=\"label-vehicle-drivetrain\">Drivetrain</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-vehicle-drivetrain\">\n                      <SelectValue placeholder=\"Select...\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {drivetrainTypes.map((type) => (\n                      <SelectItem key={type} value={type} data-testid={`option-drivetrain-${type.toLowerCase()}`}>\n                        {type}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Features Section */}\n        <div className=\"space-y-4\">\n          <FormLabel className=\"text-base font-medium\" data-testid=\"label-vehicle-features\">Vehicle Features</FormLabel>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 border rounded-lg p-4 bg-gray-50/50\">\n            {vehicleFeatures.map((feature) => (\n              <div key={feature} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`feature-${feature}`}\n                  checked={selectedFeatures.includes(feature)}\n                  onCheckedChange={(checked) => handleFeatureChange(feature, checked as boolean)}\n                  data-testid={`checkbox-feature-${feature.toLowerCase().replace(/\\s+/g, '-')}`}\n                />\n                <label\n                  htmlFor={`feature-${feature}`}\n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                >\n                  {feature}\n                </label>\n              </div>\n            ))}\n          </div>\n          {selectedFeatures.length > 0 && (\n            <div className=\"mt-3\">\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Selected features ({selectedFeatures.length}):\n              </p>\n              <div className=\"flex flex-wrap gap-1\">\n                {selectedFeatures.map((feature) => (\n                  <span\n                    key={feature}\n                    className=\"inline-flex items-center px-2 py-1 text-xs bg-primary/10 text-primary rounded\"\n                  >\n                    {feature}\n                    <button\n                      type=\"button\"\n                      onClick={() => handleFeatureChange(feature, false)}\n                      className=\"ml-1 text-primary hover:text-primary/80\"\n                    >\n                      ×\n                    </button>\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel data-testid=\"label-vehicle-description\">Description</FormLabel>\n              <FormControl>\n                <Textarea {...field} placeholder=\"Additional details about the vehicle...\" data-testid=\"textarea-vehicle-description\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Image Upload Section */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-medium\">Vehicle Images</h3>\n          <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4\">\n            <div className=\"upload-button-wrapper\" onClick={(e) => e.stopPropagation()}>\n              <ObjectUploader\n                maxNumberOfFiles={10}\n                maxFileSize={10485760}\n                onGetUploadParameters={handleGetUploadParameters}\n                onComplete={handleUploadComplete}\n                buttonClassName=\"w-full min-h-[80px] bg-white hover:bg-gray-50 border border-gray-300 rounded-lg\"\n              >\n              <div className=\"flex items-center justify-center h-full py-6 px-4\" onClick={(e) => e.preventDefault()}>\n                <div className=\"text-center\">\n                  <div className=\"text-sm text-gray-600 font-medium\">\n                    Click to upload vehicle images\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    (up to 10 images, 10MB each)\n                  </div>\n                </div>\n              </div>\n              </ObjectUploader>\n            </div>\n            \n            {uploadedImages.length > 0 && (\n              <div className=\"mt-4\">\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  {uploadedImages.length} image(s) uploaded\n                </p>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {uploadedImages.map((image, index) => (\n                    <div key={index} className=\"relative\">\n                      <img \n                        src={image} \n                        alt={`Vehicle ${index + 1}`} \n                        className=\"w-full h-20 object-cover rounded border\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setUploadedImages(prev => prev.filter((_, i) => i !== index))}\n                        className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center\"\n                      >\n                        ×\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <Button\n          type=\"submit\"\n          className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n          disabled={saveVehicleMutation.isPending}\n          data-testid=\"button-submit-vehicle\"\n        >\n          {saveVehicleMutation.isPending ? \n            (mode === 'edit' ? \"Updating Vehicle...\" : \"Adding Vehicle...\") : \n            (mode === 'edit' ? \"Update Vehicle\" : \"Add Vehicle\")\n          }\n        </Button>\n\n      </form>\n    </Form>\n  );\n}\n","size_bytes":19302},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/broker.tsx":{"content":"import { useState } from \"react\";\nimport BrokerForm from \"@/components/BrokerForm\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Check } from \"lucide-react\";\n\nexport default function Broker() {\n  return (\n    <div className=\"py-16 bg-muted\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\" data-testid=\"text-broker-title\">\n            Professional Auto Broker Services\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"text-broker-subtitle\">\n            Let our experts find and secure the perfect vehicle for you at auction.\n            Save time, money, and get access to dealer-only auctions nationwide.\n          </p>\n        </div>\n\n        {/* Service Details - Centered */}\n        <div className=\"flex justify-center mb-16\">\n          <div className=\"w-full max-w-2xl\">\n            <Card className=\"shadow-lg border border-border\" data-testid=\"card-broker-package\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl font-bold text-foreground\" data-testid=\"text-package-title\">\n                  Complete Broker Package - $500\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Check className=\"w-4 h-4 text-primary-foreground\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-foreground mb-1\" data-testid=\"text-inspection-title\">\n                      Professional Vehicle Inspection\n                    </h4>\n                    <p className=\"text-muted-foreground\" data-testid=\"text-inspection-description\">\n                      Comprehensive inspection at multiple auction locations by certified technicians\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Check className=\"w-4 h-4 text-secondary-foreground\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-foreground mb-1\" data-testid=\"text-bidding-title\">\n                      Expert Bidding Strategy\n                    </h4>\n                    <p className=\"text-muted-foreground\" data-testid=\"text-bidding-description\">\n                      Strategic bidding based on market analysis and vehicle condition\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-8 h-8 bg-foreground rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Check className=\"w-4 h-4 text-background\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-foreground mb-1\" data-testid=\"text-documentation-title\">\n                      Complete Documentation\n                    </h4>\n                    <p className=\"text-muted-foreground\" data-testid=\"text-documentation-description\">\n                      All paperwork, title transfer, and delivery coordination included\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-secondary/10 rounded-lg border border-secondary/20\" data-testid=\"card-deposit-info\">\n                  <h4 className=\"font-semibold text-foreground mb-2\" data-testid=\"text-deposit-title\">\n                    Deposit Requirements\n                  </h4>\n                  <div className=\"space-y-3 text-sm\">\n                    <p className=\"text-muted-foreground\" data-testid=\"text-service-deposit\">\n                      <strong>Service Deposit:</strong> A $500 deposit is required to begin the broker service. This deposit is applied toward the final $500 fee upon successful vehicle acquisition.\n                    </p>\n                    <p className=\"text-muted-foreground\" data-testid=\"text-auction-deposit\">\n                      <strong>Auction Budget Deposit:</strong> An additional deposit for your auction budget is required 24 hours before the auction starts. This amount will be based on your maximum bid budget.\n                    </p>\n                    <p className=\"text-muted-foreground\" data-testid=\"text-refund-policy\">\n                      $250 of the service deposit is refundable if no suitable vehicle is found within 30 days.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Broker Service Form */}\n        <Card className=\"shadow-lg border border-border\" data-testid=\"card-broker-form\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl font-bold text-foreground\" data-testid=\"text-form-title\">\n              Request Auto Broker Service\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <BrokerForm />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5469},"client/src/pages/contact.tsx":{"content":"import ContactForm from \"@/components/ContactForm\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Contact() {\n  return (\n    <div className=\"py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\" data-testid=\"text-contact-title\">\n            Get In Touch\n          </h1>\n          <p className=\"text-xl text-muted-foreground\" data-testid=\"text-contact-subtitle\">\n            Ready to find your next vehicle? Contact Castle Motors today.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Contact Information */}\n          <div>\n            <div className=\"space-y-8\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                  <svg className=\"w-6 h-6 text-primary-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\n                  </svg>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg text-foreground mb-2\" data-testid=\"text-location-title\">\n                    Office\n                  </h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-location-address\">\n                    2759 Delk Rd Ste 1190<br />\n                    Marietta, GA 30067\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center\">\n                  <svg className=\"w-6 h-6 text-secondary-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"></path>\n                  </svg>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg text-foreground mb-2\" data-testid=\"text-phone-title\">\n                    Phone & Hours\n                  </h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-phone-hours\">\n                    Sales and Service: (678) 744-2145<br />\n                    Broker Service: (404) 220-9234<br />\n                    Monday - Saturday: 9:00 AM - 7:00 PM<br />\n                    Sunday: 12:00 PM - 5:00 PM\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-foreground rounded-lg flex items-center justify-center\">\n                  <svg className=\"w-6 h-6 text-background\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"></path>\n                  </svg>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg text-foreground mb-2\" data-testid=\"text-email-title\">\n                    Email Us\n                  </h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-email-addresses\">\n                    castlemotorsatl@gmail.com\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Contact Form */}\n          <Card className=\"shadow-lg border border-border\" data-testid=\"card-contact-form\">\n            <CardHeader>\n              <CardTitle className=\"text-xl font-semibold text-foreground\" data-testid=\"text-form-title\">\n                Quick Inquiry\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ContactForm />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4541},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport MarketingSourceSelector from \"@/components/MarketingSourceSelector\";\n\nexport default function Home() {\n  return (\n    <div>\n      {/* Hero Section */}\n      <section className=\"relative\" data-testid=\"section-hero\">\n        <div\n          className=\"h-96 bg-gradient-to-r from-primary/98 to-primary/95 flex items-center\"\n          style={{\n            backgroundImage: \"url('https://images.unsplash.com/photo-1503376780353-7e6692767b70?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=800')\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n            backgroundBlendMode: \"overlay\",\n          }}\n        >\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-white\">\n            <div className=\"max-w-3xl\">\n              <h1 className=\"text-4xl md:text-6xl font-bold mb-6\" data-testid=\"text-hero-title\">\n                Your Trusted Partner in{\" \"}\n                <span className=\"text-secondary\">Premium</span> Automotive Sales\n              </h1>\n              <p className=\"text-xl md:text-2xl mb-8 text-primary-foreground/90\" data-testid=\"text-hero-subtitle\">\n                Quality used vehicles with transparent pricing and trusted service.\n                Your satisfaction is our commitment.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/inventory\">\n                  <Button \n                    className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90 font-semibold px-8 py-3\"\n                    data-testid=\"button-browse-inventory\"\n                  >\n                    Browse Our Inventory\n                  </Button>\n                </Link>\n                <Link href=\"/contact\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"border-2 border-secondary bg-secondary/20 text-secondary hover:bg-secondary hover:text-secondary-foreground font-semibold px-8 py-3\"\n                    data-testid=\"button-contact-us\"\n                  >\n                    Contact Us\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Marketing Source Selector */}\n      <MarketingSourceSelector />\n\n      {/* Company Info */}\n      <section className=\"py-16 bg-primary\" data-testid=\"section-company-info\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <svg className=\"w-8 h-8 text-secondary-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"></path>\n                </svg>\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2 text-primary-foreground\" data-testid=\"text-phone-title\">Call Us Today</h3>\n              <p className=\"text-primary-foreground/80\" data-testid=\"text-phone-details\">\n                Sales and Service: (678) 744-2145<br />\n                Broker Service: (404) 220-9234<br />\n                Mon-Sat 9AM-7PM\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <svg className=\"w-8 h-8 text-secondary-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                </svg>\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2 text-primary-foreground\" data-testid=\"text-service-title\">Trusted Service</h3>\n              <p className=\"text-primary-foreground/80\" data-testid=\"text-service-details\">\n                Licensed & Bonded<br />\n                A+ BBB Rating\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-foreground text-background py-12\" data-testid=\"section-footer\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {/* Company Info */}\n            <div className=\"md:col-span-2\">\n              <p className=\"text-background/80 mb-4 max-w-md\" data-testid=\"text-footer-description\">\n                Your trusted partner in premium automotive sales. \n                Licensed, bonded, and committed to excellence.\n              </p>\n              <div className=\"text-background/80 mb-6\" data-testid=\"text-footer-contact\">\n                <p>2759 Delk Rd Ste 1190, Marietta, GA 30067</p>\n                <p>Sales and Service: (678) 744-2145</p>\n                <p>Broker Service: (404) 220-9234</p>\n              </div>\n              <div className=\"flex items-center\">\n                <img \n                  src=\"/castle-motors-logo.png\" \n                  alt=\"Castle Motors\"\n                  className=\"h-28 w-auto object-contain\"\n                />\n              </div>\n            </div>\n\n            {/* Quick Links */}\n            <div>\n              <h4 className=\"font-semibold mb-4\" data-testid=\"text-quick-links-title\">Quick Links</h4>\n              <ul className=\"space-y-2 text-background/80\">\n                <li>\n                  <Link href=\"/inventory\" className=\"hover:text-secondary transition-colors\" data-testid=\"link-footer-inventory\">\n                    View Inventory\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/broker\" className=\"hover:text-secondary transition-colors\" data-testid=\"link-footer-broker\">\n                    Broker Service\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/contact\" className=\"hover:text-secondary transition-colors\" data-testid=\"link-footer-contact\">\n                    Contact Us\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/admin/login\" className=\"hover:text-secondary transition-colors\" data-testid=\"link-footer-admin\">\n                    Admin Login\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-background/20 mt-8 pt-8 text-center text-background/60\">\n            <p data-testid=\"text-copyright\">&copy; 2025 Castle Motors LLC. All rights reserved. Licensed Auto Dealer - Georgia.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":7096},"client/src/pages/inventory.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport type { Vehicle } from \"@shared/schema\";\nimport VehicleCard from \"@/components/VehicleCard\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Inventory() {\n  const [, setLocation] = useLocation();\n  const { data: vehicles, isLoading, refetch, error } = useQuery<Vehicle[]>({\n    queryKey: [\"/api/vehicles\"],\n  });\n\n\n\n  const handleViewDetails = (vehicle: Vehicle) => {\n    setLocation(`/vehicle/${vehicle.id}`);\n  };\n\n  return (\n    <div className=\"py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\" data-testid=\"text-inventory-title\">\n            Premium Inventory\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"text-inventory-subtitle\">\n            Hand-selected vehicles that meet our rigorous quality standards. Each car comes with detailed history and our guarantee.\n          </p>\n        </div>\n\n\n        {/* Vehicle Grid */}\n        {isLoading ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\" data-testid={`skeleton-vehicle-${i}`}>\n                <div className=\"h-48 bg-muted rounded-t-lg\"></div>\n                <CardContent className=\"p-6\">\n                  <div className=\"h-6 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-4 bg-muted rounded mb-4\"></div>\n                  <div className=\"h-10 bg-muted rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : error ? (\n          <Card className=\"text-center py-12 col-span-full\" data-testid=\"card-error\">\n            <CardContent>\n              <h3 className=\"text-lg font-semibold mb-2\">Error Loading Vehicles</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                There was an error loading our inventory. Please try again.\n              </p>\n              <Button onClick={() => refetch()} className=\"bg-primary text-primary-foreground\">\n                Retry\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {Array.isArray(vehicles) && vehicles.length > 0 ? (\n              vehicles\n                .filter((vehicle: Vehicle) => vehicle.status === \"available\")\n                .map((vehicle: Vehicle) => (\n                  <VehicleCard \n                    key={vehicle.id} \n                    vehicle={vehicle} \n                    onUpdate={refetch}\n                    onViewDetails={handleViewDetails}\n                  />\n                ))\n            ) : (\n              <Card className=\"text-center py-12 col-span-full\" data-testid=\"card-no-vehicles\">\n                <CardContent>\n                  <div className=\"text-muted-foreground mb-4\">\n                    <svg className=\"w-16 h-16 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"></path>\n                    </svg>\n                  </div>\n                  <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-no-vehicles-title\">No Vehicles Available</h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-no-vehicles-subtitle\">\n                    We're currently updating our inventory. Please check back soon for our latest selection of premium vehicles.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4121},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/PaymentCheckout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CreditCard, Shield, CheckCircle } from \"lucide-react\";\n\n// Initialize Stripe - will show error if keys not configured\nlet stripePromise: Promise<any> | null = null;\n\ntry {\n  const publishableKey = import.meta.env.VITE_STRIPE_PUBLIC_KEY;\n  if (publishableKey) {\n    stripePromise = loadStripe(publishableKey);\n  }\n} catch (error) {\n  console.warn(\"Stripe public key not configured\");\n}\n\ninterface PaymentFormProps {\n  onSuccess: () => void;\n  onError: (error: string) => void;\n  clientSecret: string;\n}\n\nfunction PaymentForm({ onSuccess, onError, clientSecret }: PaymentFormProps) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      onError(\"Payment system not ready. Please try again.\");\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/broker?payment=success`,\n        },\n        redirect: \"if_required\"\n      });\n\n      if (error) {\n        onError(error.message || \"Payment failed. Please try again.\");\n      } else {\n        onSuccess();\n      }\n    } catch (err: any) {\n      onError(\"An unexpected error occurred. Please try again.\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <Shield className=\"h-4 w-4 text-green-600\" />\n          <span className=\"text-sm font-medium\">Secure Payment</span>\n        </div>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          Your payment information is encrypted and secure. We use industry-standard security measures to protect your data.\n        </p>\n      </div>\n      \n      <PaymentElement \n        options={{\n          layout: \"tabs\"\n        }}\n      />\n      \n      <Button\n        type=\"submit\"\n        disabled={!stripe || isProcessing}\n        className=\"w-full\"\n        size=\"lg\"\n        data-testid=\"button-submit-payment\"\n      >\n        {isProcessing ? (\n          <div className=\"flex items-center gap-2\">\n            <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n            Processing Payment...\n          </div>\n        ) : (\n          <div className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-4 w-4\" />\n            Pay $500 Deposit\n          </div>\n        )}\n      </Button>\n    </form>\n  );\n}\n\ninterface PaymentCheckoutProps {\n  onSuccess: () => void;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function PaymentCheckout({ onSuccess, isOpen, onClose }: PaymentCheckoutProps) {\n  const [clientSecret, setClientSecret] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>(\"\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (isOpen && !clientSecret) {\n      createPaymentIntent();\n    }\n  }, [isOpen]);\n\n  const createPaymentIntent = async () => {\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/create-payment-intent\", { \n        amount: 500 // $500 deposit\n      });\n      const data = await response.json();\n      \n      if (data.clientSecret) {\n        setClientSecret(data.clientSecret);\n      } else {\n        throw new Error(data.error || \"Failed to initialize payment\");\n      }\n    } catch (err: any) {\n      const errorMessage = err.message || \"Failed to initialize payment. Please try again.\";\n      setError(errorMessage);\n      toast({\n        title: \"Payment Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSuccess = () => {\n    toast({\n      title: \"Payment Successful!\",\n      description: \"Your $500 deposit has been processed. We'll begin searching for your vehicle right away.\",\n    });\n    onSuccess();\n  };\n\n  const handleError = (errorMessage: string) => {\n    setError(errorMessage);\n    toast({\n      title: \"Payment Failed\",\n      description: errorMessage,\n      variant: \"destructive\",\n    });\n  };\n\n  if (!isOpen) return null;\n\n  // Show configuration error if Stripe keys aren't set\n  if (!stripePromise) {\n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-center text-red-600\">Payment Not Available</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <p>Payment processing is currently being configured. Please contact us directly to arrange your broker service deposit.</p>\n            <div className=\"space-y-2\">\n              <Button onClick={onClose} variant=\"outline\" className=\"w-full\">\n                Close\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <Card className=\"w-full max-w-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-5 w-5\" />\n            Broker Service Payment\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n              <p>Initializing secure payment...</p>\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-8 space-y-4\">\n              <div className=\"text-red-600 mb-4\">{error}</div>\n              <div className=\"space-y-2\">\n                <Button onClick={createPaymentIntent} className=\"w-full\">\n                  Try Again\n                </Button>\n                <Button onClick={onClose} variant=\"outline\" className=\"w-full\">\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          ) : clientSecret && stripePromise ? (\n            <div className=\"space-y-6\">\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">Auto Broker Service - $500 Deposit</h3>\n                <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                  <li>• Professional vehicle search at auctions</li>\n                  <li>• Expert negotiation and bidding</li>\n                  <li>• Vehicle inspection and documentation</li>\n                  <li>• Full-service delivery coordination</li>\n                </ul>\n              </div>\n\n              <Elements stripe={stripePromise} options={{ clientSecret }}>\n                <PaymentForm\n                  onSuccess={handleSuccess}\n                  onError={handleError}\n                  clientSecret={clientSecret}\n                />\n              </Elements>\n\n              <Button onClick={onClose} variant=\"outline\" className=\"w-full\">\n                Cancel Payment\n              </Button>\n            </div>\n          ) : null}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8005},"client/src/pages/admin/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport VehicleForm from \"@/components/VehicleForm\";\nimport MarketingAnalytics from \"@/components/MarketingAnalytics\";\nimport type { Vehicle, BrokerRequest, VehicleInquiry, ContactInquiry } from \"@shared/schema\";\nimport { Plus, LogOut, Car, Users, MessageSquare, Edit, Trash2, Eye, BarChart3, Image } from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const [showAddVehicle, setShowAddVehicle] = useState(false);\n  const [editingVehicle, setEditingVehicle] = useState<Vehicle | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch vehicles\n  const { data: vehicles = [], isLoading: vehiclesLoading } = useQuery<Vehicle[]>({\n    queryKey: [\"/api/vehicles\"],\n  });\n\n  // Fetch broker requests\n  const { data: brokerRequests = [], isLoading: brokerLoading } = useQuery<BrokerRequest[]>({\n    queryKey: [\"/api/broker-requests\"],\n  });\n\n  // Fetch vehicle inquiries\n  const { data: vehicleInquiries = [], isLoading: vehicleInquiriesLoading } = useQuery<VehicleInquiry[]>({\n    queryKey: [\"/api/vehicle-inquiries\"],\n  });\n\n  // Fetch contact inquiries\n  const { data: contactInquiries = [], isLoading: contactInquiriesLoading, refetch: refetchContactInquiries } = useQuery<ContactInquiry[]>({\n    queryKey: [\"/api/contact-inquiries\"],\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n    staleTime: 0,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/logout\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been successfully logged out\",\n      });\n      setLocation(\"/\");\n    },\n  });\n\n  // Delete vehicle mutation\n  const deleteVehicleMutation = useMutation({\n    mutationFn: async (vehicleId: string) => {\n      return await apiRequest(\"DELETE\", `/api/vehicles/${vehicleId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Vehicle deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vehicles\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete vehicle\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete vehicle inquiry mutation\n  const deleteVehicleInquiryMutation = useMutation({\n    mutationFn: async (inquiryId: string) => {\n      return await apiRequest(\"DELETE\", `/api/vehicle-inquiries/${inquiryId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Inquiry Deleted\",\n        description: \"Vehicle inquiry has been successfully deleted\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vehicle-inquiries\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete vehicle inquiry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete contact inquiry mutation\n  const deleteContactInquiryMutation = useMutation({\n    mutationFn: async (inquiryId: string) => {\n      return await apiRequest(\"DELETE\", `/api/contact-inquiries/${inquiryId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Inquiry Deleted\",\n        description: \"Contact inquiry has been successfully deleted\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contact-inquiries\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete contact inquiry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Process existing images mutation\n  const processImagesMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/process-images\");\n    },\n    onSuccess: async (response) => {\n      const result = await response.json();\n      toast({\n        title: \"Image Processing Complete\",\n        description: `Processed ${result.processedCount} images with ${result.errorCount} errors across ${result.totalVehicles} vehicles`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vehicles\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to process existing images\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVehicleAdded = () => {\n    setShowAddVehicle(false);\n    setEditingVehicle(null);\n    queryClient.invalidateQueries({ queryKey: [\"/api/vehicles\"] });\n    toast({\n      title: \"Success\",\n      description: editingVehicle ? \"Vehicle updated successfully\" : \"Vehicle added to inventory successfully\",\n    });\n  };\n\n  const handleEditVehicle = (vehicle: Vehicle) => {\n    setEditingVehicle(vehicle);\n    setShowAddVehicle(true);\n  };\n\n  const handleCancelEdit = () => {\n    setShowAddVehicle(false);\n    setEditingVehicle(null);\n  };\n\n  const handleViewDetails = (vehicle: Vehicle) => {\n    setLocation(`/vehicle/${vehicle.id}`);\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"in_progress\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"completed\":\n        return \"bg-green-100 text-green-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <img \n                  src=\"/castle-motors-logo.png\" \n                  alt=\"Castle Motors\"\n                  className=\"h-10 w-auto\"\n                />\n              </Link>\n              <h1 className=\"text-xl font-semibold text-foreground\">Admin Dashboard</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\" className=\"text-sm text-muted-foreground hover:text-primary\">\n                View Website\n              </Link>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => logoutMutation.mutate()}\n                disabled={logoutMutation.isPending}\n                data-testid=\"button-admin-logout\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Tabs defaultValue=\"inventory\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3 sm:grid-cols-5 gap-0.5 h-auto p-1\">\n            <TabsTrigger value=\"inventory\" className=\"flex items-center gap-1 px-1.5 sm:px-3 py-1.5 text-xs\">\n              <Car className=\"h-3 w-3\" />\n              <span className=\"hidden sm:inline\">Inventory</span>\n              <span className=\"sm:hidden\">Inv</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"broker-requests\" className=\"flex items-center gap-1 px-1.5 sm:px-3 py-1.5 text-xs\">\n              <Users className=\"h-3 w-3\" />\n              <span className=\"hidden sm:inline\">Brokers</span>\n              <span className=\"sm:hidden\">Bro</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"vehicle-inquiries\" className=\"flex items-center gap-1 px-1.5 sm:px-3 py-1.5 text-xs\">\n              <MessageSquare className=\"h-3 w-3\" />\n              <span className=\"hidden sm:inline\">Vehicle</span>\n              <span className=\"sm:hidden\">Veh</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"contact-inquiries\" className=\"flex items-center gap-1 px-1.5 sm:px-3 py-1.5 text-xs\">\n              <MessageSquare className=\"h-3 w-3\" />\n              <span className=\"hidden sm:inline\">Contact</span>\n              <span className=\"sm:hidden\">Con</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"marketing-analytics\" className=\"flex items-center gap-1 px-1.5 sm:px-3 py-1.5 text-xs\">\n              <BarChart3 className=\"h-3 w-3\" />\n              <span className=\"hidden sm:inline\">Analytics</span>\n              <span className=\"sm:hidden\">Ana</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Vehicle Inventory Tab */}\n          <TabsContent value=\"inventory\" className=\"space-y-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n              <div>\n                <h2 className=\"text-xl sm:text-2xl font-bold text-foreground\">Vehicle Inventory</h2>\n                <p className=\"text-sm sm:text-base text-muted-foreground\">Manage your vehicle inventory</p>\n              </div>\n              <div className=\"flex flex-col sm:flex-row gap-2 w-full sm:w-auto\">\n                <Button \n                  onClick={() => {\n                    if (showAddVehicle && editingVehicle) {\n                      handleCancelEdit();\n                    } else {\n                      setShowAddVehicle(!showAddVehicle);\n                      setEditingVehicle(null);\n                    }\n                  }}\n                  className=\"bg-primary hover:bg-primary/90\"\n                  data-testid=\"button-add-vehicle\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  {showAddVehicle ? \"Cancel\" : \"Add Vehicle\"}\n                </Button>\n                <Button \n                  onClick={() => processImagesMutation.mutate()}\n                  disabled={processImagesMutation.isPending}\n                  variant=\"outline\"\n                  className=\"border-primary text-primary hover:bg-primary/10\"\n                  data-testid=\"button-process-images\"\n                >\n                  <Image className=\"h-4 w-4 mr-2\" />\n                  {processImagesMutation.isPending ? \"Processing...\" : \"Process Images\"}\n                </Button>\n              </div>\n            </div>\n\n            {showAddVehicle && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>{editingVehicle ? \"Edit Vehicle\" : \"Add New Vehicle\"}</CardTitle>\n                  <CardDescription>\n                    {editingVehicle ? \"Update vehicle details and images\" : \"Add a new vehicle to your inventory with multiple images\"}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <VehicleForm \n                    onSuccess={handleVehicleAdded} \n                    vehicle={editingVehicle || undefined}\n                    mode={editingVehicle ? 'edit' : 'create'}\n                  />\n                </CardContent>\n              </Card>\n            )}\n\n            {vehiclesLoading ? (\n              <div className=\"text-center py-8\">Loading vehicles...</div>\n            ) : vehicles.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No vehicles in inventory</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">Click \"Add Vehicle\" to add your first vehicle</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {vehicles.map((vehicle) => (\n                  <Card key={vehicle.id} className=\"overflow-hidden\">\n                    <div className=\"aspect-video relative bg-gray-100\">\n                      {vehicle.images && vehicle.images.length > 0 ? (\n                        <img \n                          src={vehicle.images[0]} \n                          alt={`${vehicle.year} ${vehicle.make} ${vehicle.model}`}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full flex items-center justify-center\">\n                          <Car className=\"h-12 w-12 text-gray-400\" />\n                        </div>\n                      )}\n                      <Badge \n                        className={`absolute top-2 right-2 ${\n                          vehicle.status === 'available' ? 'bg-green-500' :\n                          vehicle.status === 'sold' ? 'bg-red-500' : 'bg-yellow-500'\n                        }`}\n                      >\n                        {vehicle.status}\n                      </Badge>\n                    </div>\n                    <CardContent className=\"p-4\">\n                      <h3 className=\"font-semibold text-lg\">\n                        {vehicle.year} {vehicle.make} {vehicle.model}\n                      </h3>\n                      <p className=\"text-2xl font-bold text-primary mt-2\">\n                        ${parseFloat(vehicle.price).toLocaleString()}\n                      </p>\n                      <div className=\"mt-4 space-y-3\">\n                        <span className=\"text-sm text-muted-foreground block\">\n                          {vehicle.mileage?.toLocaleString()} miles\n                        </span>\n                        <div className=\"flex flex-col sm:flex-row gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleViewDetails(vehicle)}\n                            data-testid={`button-view-details-${vehicle.id}`}\n                            className=\"flex-1 sm:flex-none\"\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleEditVehicle(vehicle)}\n                            data-testid={`button-edit-vehicle-${vehicle.id}`}\n                            className=\"flex-1 sm:flex-none\"\n                          >\n                            <Edit className=\"h-4 w-4 mr-1\" />\n                            Edit\n                          </Button>\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            onClick={() => deleteVehicleMutation.mutate(vehicle.id)}\n                            disabled={deleteVehicleMutation.isPending}\n                            data-testid={`button-delete-vehicle-${vehicle.id}`}\n                            className=\"flex-1 sm:flex-none\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-1\" />\n                            Delete\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Broker Requests Tab */}\n          <TabsContent value=\"broker-requests\" className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Broker Service Requests</h2>\n              <p className=\"text-muted-foreground\">View and manage all broker service requests</p>\n            </div>\n\n            {brokerLoading ? (\n              <div className=\"text-center py-8\">Loading broker requests...</div>\n            ) : (\n              <div className=\"space-y-4\">\n                {brokerRequests.map((request) => (\n                  <Card key={request.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">\n                            {request.firstName} {request.lastName}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(request.createdAt!).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <Badge className={getStatusBadgeColor(request.status)}>\n                          {request.status}\n                        </Badge>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                        <div>\n                          <strong>Contact:</strong>\n                          <p>{request.email}</p>\n                          <p>{request.phone}</p>\n                        </div>\n                        <div>\n                          <strong>Budget:</strong>\n                          <p>{request.maxBudget}</p>\n                          {request.mileageRange && (\n                            <>\n                              <strong>Mileage:</strong>\n                              <p>{request.mileageRange}</p>\n                            </>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"mb-4\">\n                        <strong>Vehicle Selections:</strong>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 mt-2\">\n                          {request.vehicleSelections.map((selection, index) => (\n                            <div key={index} className=\"bg-gray-50 p-3 rounded-lg\">\n                              <p className=\"font-medium\">{selection.make} {selection.model}</p>\n                              <p className=\"text-sm text-muted-foreground\">{selection.yearRange}</p>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {request.additionalRequirements && (\n                        <div>\n                          <strong>Additional Requirements:</strong>\n                          <p className=\"mt-1\">{request.additionalRequirements}</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n                {brokerRequests.length === 0 && (\n                  <Card>\n                    <CardContent className=\"p-8 text-center\">\n                      <MessageSquare className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-muted-foreground\">No broker requests yet</h3>\n                      <p className=\"text-muted-foreground\">Broker service requests will appear here</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Vehicle Inquiries Tab */}\n          <TabsContent value=\"vehicle-inquiries\" className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Vehicle Inquiries</h2>\n              <p className=\"text-muted-foreground\">View and manage all vehicle inquiries from customers</p>\n            </div>\n\n            {vehicleInquiriesLoading ? (\n              <div className=\"text-center py-8\">Loading vehicle inquiries...</div>\n            ) : (\n              <div className=\"space-y-4\">\n                {vehicleInquiries.map((inquiry: VehicleInquiry) => {\n                  const vehicle = vehicles.find(v => v.id === inquiry.vehicleId);\n                  return (\n                    <Card key={inquiry.id}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">\n                              {inquiry.firstName} {inquiry.lastName}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {new Date(inquiry.createdAt!).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge className={getStatusBadgeColor(inquiry.status)}>\n                              {inquiry.status}\n                            </Badge>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => deleteVehicleInquiryMutation.mutate(inquiry.id)}\n                              disabled={deleteVehicleInquiryMutation.isPending}\n                              data-testid={`button-delete-vehicle-inquiry-${inquiry.id}`}\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                          <div>\n                            <strong>Contact:</strong>\n                            <p>{inquiry.email}</p>\n                            <p>{inquiry.phone}</p>\n                          </div>\n                          <div>\n                            <strong>Vehicle:</strong>\n                            {vehicle ? (\n                              <p>{vehicle.year} {vehicle.make} {vehicle.model} - ${parseFloat(vehicle.price).toLocaleString()}</p>\n                            ) : (\n                              <p>Vehicle not found (ID: {inquiry.vehicleId})</p>\n                            )}\n                          </div>\n                        </div>\n\n                        {inquiry.message && (\n                          <div>\n                            <strong>Message:</strong>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              {inquiry.message}\n                            </p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n                {vehicleInquiries.length === 0 && (\n                  <Card>\n                    <CardContent className=\"p-8 text-center\">\n                      <MessageSquare className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-muted-foreground\">No vehicle inquiries yet</h3>\n                      <p className=\"text-muted-foreground\">Customer inquiries about vehicles will appear here</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Contact Inquiries Tab */}\n          <TabsContent value=\"contact-inquiries\" className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Contact Inquiries</h2>\n              <p className=\"text-muted-foreground\">View and manage all general contact inquiries</p>\n            </div>\n\n            {contactInquiriesLoading ? (\n              <div className=\"text-center py-8\">Loading contact inquiries...</div>\n            ) : (\n              <div className=\"space-y-4\">\n                {Array.isArray(contactInquiries) && contactInquiries.map((inquiry: ContactInquiry) => (\n                  <Card key={inquiry.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">\n                            {inquiry.name}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(inquiry.createdAt!).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={getStatusBadgeColor(inquiry.status)}>\n                            {inquiry.status}\n                          </Badge>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => deleteContactInquiryMutation.mutate(inquiry.id)}\n                            disabled={deleteContactInquiryMutation.isPending}\n                            data-testid={`button-delete-contact-inquiry-${inquiry.id}`}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                        <div>\n                          <strong>Contact:</strong>\n                          <p>{inquiry.email}</p>\n                        </div>\n                        <div>\n                          <strong>Subject:</strong>\n                          <p>{inquiry.subject}</p>\n                        </div>\n                      </div>\n\n                      <div>\n                        <strong>Message:</strong>\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          {inquiry.message}\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n                {Array.isArray(contactInquiries) && contactInquiries.length === 0 && (\n                  <Card>\n                    <CardContent className=\"p-8 text-center\">\n                      <MessageSquare className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-muted-foreground\">No contact inquiries yet</h3>\n                      <p className=\"text-muted-foreground\">Contact inquiries will appear here</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Marketing Analytics Tab */}\n          <TabsContent value=\"marketing-analytics\" className=\"space-y-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n              <div>\n                <h2 className=\"text-xl sm:text-2xl font-bold text-foreground\">Marketing Analytics</h2>\n                <p className=\"text-sm sm:text-base text-muted-foreground\">Track how customers find your website</p>\n              </div>\n            </div>\n\n            <MarketingAnalytics />\n          </TabsContent>\n        </Tabs>\n      </main>\n\n    </div>\n  );\n}","size_bytes":27457},"client/src/pages/admin/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      return await apiRequest(\"POST\", \"/api/admin/login\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Login successful! Redirecting to admin dashboard...\",\n      });\n      setLocation(\"/admin/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\">\n            <img \n              src=\"/castle-motors-logo.png\" \n              alt=\"Castle Motors\"\n              className=\"h-16 w-auto mx-auto mb-4\"\n            />\n          </Link>\n          <h1 className=\"text-2xl font-bold text-foreground\">Admin Login</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Access the Castle Motors admin dashboard\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign In</CardTitle>\n            <CardDescription>\n              Enter your admin credentials to continue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter your username\"\n                          data-testid=\"input-admin-username\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\"\n                          placeholder=\"Enter your password\"\n                          data-testid=\"input-admin-password\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-primary hover:bg-primary/90\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-admin-login\"\n                >\n                  {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <Link href=\"/\" className=\"text-sm text-muted-foreground hover:text-primary\">\n                ← Back to Website\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4690},"scripts/create-admin.js":{"content":"import bcrypt from 'bcrypt';\nimport { db } from '../server/db.js';\nimport { adminUsers } from '../shared/schema.js';\n\nasync function createAdminUser() {\n  const username = 'admin';\n  const password = 'admin123'; // In production, use a strong password\n  const email = 'castlemotorsatl@gmail.com';\n  \n  try {\n    // Check if admin already exists\n    const existingAdmin = await db.select().from(adminUsers).where(eq(adminUsers.username, username));\n    \n    if (existingAdmin.length > 0) {\n      console.log('Admin user already exists');\n      return;\n    }\n    \n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n    \n    // Create admin user\n    const [admin] = await db.insert(adminUsers).values({\n      username,\n      password: hashedPassword,\n      email\n    }).returning();\n    \n    console.log('Admin user created successfully:');\n    console.log('Username:', username);\n    console.log('Password:', password);\n    console.log('Email:', email);\n    console.log('ID:', admin.id);\n    \n  } catch (error) {\n    console.error('Error creating admin user:', error);\n  }\n}\n\ncreateAdminUser();","size_bytes":1126},"client/src/pages/VehicleDetails.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ChevronLeft, ChevronRight, Phone, Mail, MessageSquare } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Vehicle, InsertVehicleInquiry } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertVehicleInquirySchema } from \"@shared/schema\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nexport default function VehicleDetails() {\n  const { id } = useParams() as { id: string };\n  const [, setLocation] = useLocation();\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch vehicle details\n  const { data: vehicle, isLoading } = useQuery<Vehicle>({\n    queryKey: [\"/api/vehicles\", id],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/vehicles/${id}`);\n      return await response.json();\n    },\n  });\n\n  // Vehicle inquiry form\n  const form = useForm<InsertVehicleInquiry>({\n    resolver: zodResolver(insertVehicleInquirySchema),\n    defaultValues: {\n      vehicleId: id,\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      message: \"\",\n    },\n  });\n\n  // Submit inquiry mutation\n  const inquiryMutation = useMutation({\n    mutationFn: async (data: InsertVehicleInquiry) => {\n      return await apiRequest(\"POST\", \"/api/vehicle-inquiries\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Inquiry Sent\",\n        description: \"Your inquiry has been sent successfully. We'll contact you soon!\",\n      });\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send inquiry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertVehicleInquiry) => {\n    inquiryMutation.mutate(data);\n  };\n\n  const formatPrice = (price: string) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      maximumFractionDigits: 0,\n    }).format(parseFloat(price));\n  };\n\n  const nextImage = () => {\n    if (vehicle?.images && vehicle.images.length > 1) {\n      setCurrentImageIndex((prev) => \n        prev === vehicle.images.length - 1 ? 0 : prev + 1\n      );\n    }\n  };\n\n  const prevImage = () => {\n    if (vehicle?.images && vehicle.images.length > 1) {\n      setCurrentImageIndex((prev) => \n        prev === 0 ? vehicle.images.length - 1 : prev - 1\n      );\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">Loading vehicle details...</div>\n      </div>\n    );\n  }\n\n  if (!vehicle) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Vehicle Not Found</h1>\n          <Button onClick={() => setLocation(\"/\")}>Return to Inventory</Button>\n        </div>\n      </div>\n    );\n  }\n\n  const hasImages = vehicle.images && vehicle.images.length > 0;\n  const currentImage = hasImages ? vehicle.images[currentImageIndex] : null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <img \n                src=\"/castle-motors-logo.png\" \n                alt=\"Castle Motors\"\n                className=\"h-10 w-auto\"\n              />\n              <Button \n                variant=\"ghost\" \n                onClick={() => setLocation(\"/\")}\n                className=\"flex items-center gap-2\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                Back to Inventory\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Image Carousel */}\n          <div className=\"space-y-4\">\n            <Card className=\"overflow-hidden\">\n              <div className=\"aspect-video relative bg-gray-100\">\n                {currentImage ? (\n                  <img \n                    src={currentImage}\n                    alt={`${vehicle.year} ${vehicle.make} ${vehicle.model}`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center\">\n                    <span className=\"text-gray-400\">No Image Available</span>\n                  </div>\n                )}\n                \n                {/* Navigation arrows for multiple images */}\n                {hasImages && vehicle.images.length > 1 && (\n                  <>\n                    <Button\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      className=\"absolute left-2 top-1/2 transform -translate-y-1/2\"\n                      onClick={prevImage}\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                      onClick={nextImage}\n                    >\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </>\n                )}\n                \n                {/* Image counter */}\n                {hasImages && vehicle.images.length > 1 && (\n                  <div className=\"absolute bottom-2 right-2 bg-black/50 text-white px-2 py-1 rounded text-sm\">\n                    {currentImageIndex + 1} / {vehicle.images.length}\n                  </div>\n                )}\n              </div>\n            </Card>\n\n            {/* Thumbnail strip for multiple images */}\n            {hasImages && vehicle.images.length > 1 && (\n              <div className=\"flex gap-2 overflow-x-auto\">\n                {vehicle.images.map((image, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setCurrentImageIndex(index)}\n                    className={`flex-shrink-0 w-20 h-20 rounded border-2 overflow-hidden ${\n                      index === currentImageIndex ? 'border-primary' : 'border-border'\n                    }`}\n                  >\n                    <img \n                      src={image}\n                      alt={`Thumbnail ${index + 1}`}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Vehicle Details & Contact Form */}\n          <div className=\"space-y-6\">\n            {/* Vehicle Information */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <CardTitle className=\"text-2xl\">\n                      {vehicle.year} {vehicle.make} {vehicle.model}\n                    </CardTitle>\n                    <div className=\"text-3xl font-bold text-primary mt-2\">\n                      {formatPrice(vehicle.price)}\n                    </div>\n                  </div>\n                  <Badge className={\n                    vehicle.status === 'available' ? 'bg-green-500' :\n                    vehicle.status === 'sold' ? 'bg-red-500' : 'bg-yellow-500'\n                  }>\n                    {vehicle.status}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <strong>Mileage:</strong>\n                    <p>{vehicle.mileage?.toLocaleString() || 'Not specified'} miles</p>\n                  </div>\n                  <div>\n                    <strong>Transmission:</strong>\n                    <p>{vehicle.transmission || 'Not specified'}</p>\n                  </div>\n                  <div>\n                    <strong>Drivetrain:</strong>\n                    <p>{vehicle.drivetrain || 'Not specified'}</p>\n                  </div>\n                  <div className=\"col-span-2\">\n                    <strong>Features:</strong>\n                    {vehicle.features && vehicle.features.trim() ? (\n                      <div className=\"flex flex-wrap gap-1 mt-2\">\n                        {vehicle.features.split(\", \").map((feature, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {feature.trim()}\n                          </Badge>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-muted-foreground mt-1\">None specified</p>\n                    )}\n                  </div>\n                </div>\n                \n                {vehicle.description && (\n                  <div>\n                    <strong>Description:</strong>\n                    <p className=\"text-muted-foreground mt-1\">{vehicle.description}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Contact Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"h-5 w-5\" />\n                  Interested in this vehicle?\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Fill out the form below and we'll get back to you with more information.\n                </p>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter first name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter last name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"Enter email address\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input type=\"tel\" placeholder=\"Enter phone number\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"message\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Message (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Tell us what you'd like to know about this vehicle...\"\n                              className=\"min-h-[100px]\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\"\n                      disabled={inquiryMutation.isPending}\n                      data-testid=\"button-submit-inquiry\"\n                    >\n                      {inquiryMutation.isPending ? \"Sending...\" : \"Send Inquiry\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n\n            {/* Direct Contact */}\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center space-y-4\">\n                  <h3 className=\"font-semibold\">Or contact us directly:</h3>\n                  <div className=\"flex justify-center gap-4 flex-wrap\">\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span>Sales and Service: (678) 744-2145</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span>Broker: (404) 220-9234</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Mail className=\"h-4 w-4\" />\n                      <span>castlemotorsatl@gmail.com</span>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    2759 Delk Rd Ste 1190, Marietta, GA 30067\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":15558},"client/src/pages/terms.tsx":{"content":"export default function Terms() {\n  return (\n    <div className=\"py-16 bg-background\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\" data-testid=\"text-terms-title\">\n            Auto Broker Service Terms & Conditions\n          </h1>\n          <p className=\"text-xl text-muted-foreground\" data-testid=\"text-terms-subtitle\">\n            Castle Motors Professional Auto Broker Service Agreement\n          </p>\n        </div>\n\n        <div className=\"prose prose-lg max-w-none dark:prose-invert\">\n          <div className=\"space-y-8\">\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">Service Overview</h2>\n              <p>\n                Castle Motors (\"Company\") provides professional auto broker services to locate, inspect, bid on, and acquire vehicles at dealer-only auctions on behalf of clients (\"Customer\"). This service includes comprehensive vehicle search, professional inspection, strategic bidding, and complete transaction management.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">Service Deposit Terms</h2>\n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-medium\">$500 Service Deposit</h3>\n                <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                  <li>A non-refundable $500 service deposit is required to initiate broker services</li>\n                  <li>This deposit serves as payment for professional broker services regardless of outcome</li>\n                  <li>The deposit covers up to 30 days of active vehicle search and bidding activities</li>\n                  <li>$250 of the deposit may be refunded only if no suitable vehicles are found within 30 days and Customer has been reasonable in their requirements</li>\n                  <li>The deposit does not cover the actual vehicle purchase price or auction fees</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">Auction Budget Deposit</h2>\n              <div className=\"space-y-4\">\n                <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                  <li>A separate auction budget deposit is required 24 hours before bidding begins</li>\n                  <li>This deposit amount is based on Customer's maximum bid budget plus applicable auction fees</li>\n                  <li>Auction budget deposits are fully refundable if no vehicle is successfully acquired</li>\n                  <li>If a vehicle is won, the deposit is applied toward the total purchase price</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">Service Scope & Responsibilities</h2>\n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-medium\">Company Responsibilities</h3>\n                <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                  <li>Search dealer-only auctions nationwide for vehicles matching Customer specifications</li>\n                  <li>Provide professional vehicle inspections by certified technicians</li>\n                  <li>Develop strategic bidding approaches based on market analysis</li>\n                  <li>Handle all auction registration, bidding, and transaction processes</li>\n                  <li>Coordinate vehicle title transfer and delivery arrangements</li>\n                  <li>Provide regular updates on search progress and available vehicles</li>\n                </ul>\n\n                <h3 className=\"text-xl font-medium\">Customer Responsibilities</h3>\n                <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                  <li>Provide accurate and complete vehicle specifications and requirements</li>\n                  <li>Respond promptly to communications regarding potential vehicles</li>\n                  <li>Provide auction budget deposits in a timely manner</li>\n                  <li>Maintain reasonable expectations regarding vehicle availability and condition</li>\n                  <li>Complete final purchase transactions within agreed timeframes</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">Vehicle Inspection & Condition</h2>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>All vehicles undergo professional inspection prior to bidding</li>\n                <li>Inspection reports include mechanical, cosmetic, and operational assessments</li>\n                <li>Auction vehicles are sold \"as-is\" with no warranties from auction houses</li>\n                <li>Customer acknowledges that used vehicles may have undisclosed issues</li>\n                <li>Company provides inspection expertise but cannot guarantee against all defects</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">Bidding & Purchase Process</h2>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Company bids up to Customer's pre-approved maximum budget</li>\n                <li>Bidding strategy is at Company's professional discretion</li>\n                <li>Successful bids create binding purchase obligations</li>\n                <li>Auction fees, transportation, and taxes are Customer's responsibility</li>\n                <li>Failed bids do not result in any additional charges to Customer</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">Limitation of Liability</h2>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Company's liability is limited to the amount of service deposits paid</li>\n                <li>Company is not liable for vehicle defects, auction house policies, or market conditions</li>\n                <li>Customer assumes all risks associated with auction vehicle purchases</li>\n                <li>Company makes no warranties regarding vehicle condition, title, or suitability</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">Cancellation Policy</h2>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Customer may cancel service at any time with written notice</li>\n                <li>Service deposits are non-refundable except as specified above</li>\n                <li>Auction budget deposits are refundable if no active bids are pending</li>\n                <li>Cancellation does not affect obligations for vehicles already won at auction</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">Dispute Resolution</h2>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Disputes will be resolved through binding arbitration in Georgia</li>\n                <li>Georgia state law governs this agreement</li>\n                <li>Customer waives right to jury trial and class action participation</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-4\">Contact Information</h2>\n              <div className=\"bg-muted p-6 rounded-lg\">\n                <p className=\"font-medium mb-2\">Castle Motors LLC</p>\n                <p>2759 Delk Rd Ste 1190, Marietta, GA 30067</p>\n                <p>Phone: (678) 744-2145</p>\n                <p className=\"mt-4 text-sm text-muted-foreground\">\n                  Licensed Auto Dealer - Georgia\n                </p>\n              </div>\n            </section>\n\n            <section>\n              <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 p-6 rounded-lg\">\n                <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                  <strong>Important:</strong> By using our auto broker service, you acknowledge that you have read, understood, and agree to be bound by these terms and conditions. These terms may be updated periodically, and continued use of our services constitutes acceptance of any modifications.\n                </p>\n              </div>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8650},"client/src/components/MarketingAnalytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\n\nconst COLORS = {\n  facebook: \"#1877F2\",\n  google: \"#4285F4\", \n  instagram: \"#E4405F\",\n  sign: \"#FFA500\",\n  referral: \"#32CD32\"\n};\n\nconst sourceLabels = {\n  facebook: \"Facebook\",\n  google: \"Google\",\n  instagram: \"Instagram\", \n  sign: \"Sign\",\n  referral: \"Referral\"\n};\n\ninterface MarketingSourceStat {\n  source: string;\n  count: number;\n  percentage: number;\n}\n\nexport default function MarketingAnalytics() {\n  const { data: stats, isLoading, error } = useQuery<MarketingSourceStat[]>({\n    queryKey: [\"/api/marketing-sources/stats\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Marketing Source Analytics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-center h-64\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error || !stats || stats.length === 0) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Marketing Source Analytics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center text-muted-foreground py-8\">\n              {error ? \"Error loading analytics data\" : \"No marketing source data available yet\"}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const chartData = stats.map((stat: any) => ({\n    ...stat,\n    name: sourceLabels[stat.source as keyof typeof sourceLabels] || stat.source,\n    fill: COLORS[stat.source as keyof typeof COLORS] || \"#8884d8\"\n  }));\n\n  const totalResponses = stats.reduce((sum: number, stat: any) => sum + stat.count, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Total Responses\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalResponses}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Top Source\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {sourceLabels[stats[0]?.source as keyof typeof sourceLabels] || stats[0]?.source || \"N/A\"}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              {stats[0]?.percentage || 0}% of traffic\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Sources Active\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.length}</div>\n            <div className=\"text-sm text-muted-foreground\">\n              out of 5 total\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Pie Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Traffic Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={chartData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percentage }) => `${name}: ${percentage}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"count\"\n                >\n                  {chartData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Bar Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Source Comparison</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"count\" fill=\"#8884d8\">\n                  {chartData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Data Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Detailed Breakdown</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {chartData.map((stat, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50\">\n                <div className=\"flex items-center gap-3\">\n                  <div \n                    className=\"w-4 h-4 rounded-full\"\n                    style={{ backgroundColor: stat.fill }}\n                  />\n                  <span className=\"font-medium\">{stat.name}</span>\n                </div>\n                <div className=\"flex items-center gap-4 text-sm\">\n                  <span className=\"font-semibold\">{stat.count} responses</span>\n                  <span className=\"text-muted-foreground\">{stat.percentage}%</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6415},"client/src/components/MarketingSourceSelector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { InsertMarketingSource } from \"@shared/schema\";\n\nconst marketingSources = [\n  { value: \"facebook\", label: \"Facebook\", icon: \"📘\" },\n  { value: \"google\", label: \"Google\", icon: \"🔍\" },\n  { value: \"instagram\", label: \"Instagram\", icon: \"📷\" },\n  { value: \"sign\", label: \"Sign\", icon: \"🪧\" },\n  { value: \"referral\", label: \"Referral\", icon: \"👥\" }\n];\n\nexport default function MarketingSourceSelector() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    // Check if user has already selected a source in this session\n    const hasSelected = sessionStorage.getItem('marketing_source_selected');\n    if (!hasSelected) {\n      // Show popup after 3 seconds\n      const timer = setTimeout(() => {\n        setIsOpen(true);\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, []);\n\n  const sourceMutation = useMutation({\n    mutationFn: async (source: string) => {\n      const data: InsertMarketingSource = {\n        source,\n        ipAddress: null,\n        userAgent: navigator.userAgent\n      };\n      return apiRequest(\"POST\", \"/api/marketing-sources\", data);\n    },\n    onSuccess: () => {\n      // Mark as selected and close popup\n      sessionStorage.setItem('marketing_source_selected', 'true');\n      setIsOpen(false);\n    },\n    onError: (error) => {\n      console.error(\"Failed to save marketing source:\", error);\n      // Still close popup and mark as selected to avoid repeated prompts\n      sessionStorage.setItem('marketing_source_selected', 'true');\n      setIsOpen(false);\n    },\n  });\n\n  const handleSourceSelect = (source: string) => {\n    sourceMutation.mutate(source);\n  };\n\n  const handleDismiss = () => {\n    sessionStorage.setItem('marketing_source_selected', 'true');\n    setIsOpen(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => {\n      if (!open) {\n        handleDismiss();\n      }\n    }}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-lg\">\n            How did you find Castle Motors?\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <p className=\"text-center text-sm text-muted-foreground\">\n            Help us understand how our customers discover us\n          </p>\n          \n          <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3\">\n            {marketingSources.map((source) => (\n              <Button\n                key={source.value}\n                variant=\"outline\"\n                className=\"h-16 flex flex-col items-center gap-2 hover:bg-secondary/20 cursor-pointer\"\n                onClick={() => handleSourceSelect(source.value)}\n                disabled={sourceMutation.isPending}\n                data-testid={`button-marketing-source-${source.value}`}\n                type=\"button\"\n              >\n                <span className=\"text-2xl\">{source.icon}</span>\n                <span className=\"text-sm font-medium\">{source.label}</span>\n              </Button>\n            ))}\n          </div>\n          \n          {sourceMutation.isPending && (\n            <div className=\"text-center text-sm text-muted-foreground animate-pulse\">\n              Thank you for your feedback! Saving...\n            </div>\n          )}\n          \n          <div className=\"flex justify-center\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleDismiss}\n              className=\"text-xs text-muted-foreground\"\n              data-testid=\"button-dismiss-marketing-source\"\n            >\n              Skip this question\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3986},"server/imageProcessor.ts":{"content":"import sharp from 'sharp';\nimport { objectStorageClient } from './objectStorage';\nimport path from 'path';\nimport fs from 'fs';\n\nexport class ImageProcessor {\n  private static readonly STANDARD_WIDTH = 800;\n  private static readonly STANDARD_HEIGHT = 600;\n  private static readonly WATERMARK_SIZE = 120;\n  private static readonly WATERMARK_MARGIN = 20;\n\n  /**\n   * Processes a vehicle image by resizing it to standard dimensions and adding a watermark\n   */\n  async processVehicleImage(inputBuffer: Buffer): Promise<Buffer> {\n    try {\n      // Load the Castle Motors logo\n      const logoPath = path.join(process.cwd(), 'client/public/castle-motors-logo.png');\n      \n      if (!fs.existsSync(logoPath)) {\n        console.warn('Castle Motors logo not found, processing without watermark');\n        return await this.resizeImage(inputBuffer);\n      }\n\n      // Resize the main image to standard dimensions\n      const resizedImage = await sharp(inputBuffer)\n        .resize(ImageProcessor.STANDARD_WIDTH, ImageProcessor.STANDARD_HEIGHT, {\n          fit: 'cover',\n          position: 'center'\n        })\n        .jpeg({ quality: 85 })\n        .toBuffer();\n\n      // Prepare the watermark\n      const watermark = await sharp(logoPath)\n        .resize(ImageProcessor.WATERMARK_SIZE, undefined, {\n          fit: 'inside',\n          withoutEnlargement: true\n        })\n        .png({ quality: 90 })\n        .toBuffer();\n\n      // Get watermark dimensions for positioning\n      const { width: wmWidth, height: wmHeight } = await sharp(watermark).metadata();\n      \n      // Composite the watermark onto the image (bottom-right)\n      const processedImage = await sharp(resizedImage)\n        .composite([{\n          input: watermark,\n          top: ImageProcessor.STANDARD_HEIGHT - (wmHeight || ImageProcessor.WATERMARK_SIZE) - ImageProcessor.WATERMARK_MARGIN,\n          left: ImageProcessor.STANDARD_WIDTH - (wmWidth || ImageProcessor.WATERMARK_SIZE) - ImageProcessor.WATERMARK_MARGIN,\n          blend: 'over'\n        }])\n        .jpeg({ quality: 85 })\n        .toBuffer();\n\n      return processedImage;\n    } catch (error) {\n      console.error('Error processing image with watermark:', error);\n      // Fallback to just resizing if watermarking fails\n      return await this.resizeImage(inputBuffer);\n    }\n  }\n\n  /**\n   * Resizes an image to standard dimensions without watermark\n   */\n  private async resizeImage(inputBuffer: Buffer): Promise<Buffer> {\n    return sharp(inputBuffer)\n      .resize(ImageProcessor.STANDARD_WIDTH, ImageProcessor.STANDARD_HEIGHT, {\n        fit: 'cover',\n        position: 'center'\n      })\n      .jpeg({ quality: 85 })\n      .toBuffer();\n  }\n\n  /**\n   * Downloads an image from object storage, processes it, and uploads the processed version\n   */\n  async processAndReplaceImage(bucketName: string, objectName: string): Promise<void> {\n    try {\n      // Download the original image\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n      \n      const [buffer] = await file.download();\n      \n      // Process the image\n      const processedBuffer = await this.processVehicleImage(buffer);\n      \n      // Upload the processed image back to the same location\n      await file.save(processedBuffer, {\n        metadata: {\n          contentType: 'image/jpeg',\n          metadata: {\n            processedByServer: 'true',\n            processedAt: new Date().toISOString()\n          }\n        }\n      });\n\n      console.log(`Successfully processed and replaced image: ${objectName}`);\n    } catch (error) {\n      console.error(`Error processing image ${objectName}:`, error);\n      throw error;\n    }\n  }\n}\n\nexport const imageProcessor = new ImageProcessor();","size_bytes":3737}},"version":1}